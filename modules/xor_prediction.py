import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import plotly.graph_objects as go
from scipy.ndimage import gaussian_filter

st.set_page_config(layout="wide")

def run():
    # C√≠m √©s le√≠r√°s
    st.title("üß† Insight Learning ‚Äì Bel√°t√°s alap√∫ tanul√°s szimul√°ci√≥")

    st.markdown("""
A **bel√°t√°sos tanul√°s** sor√°n a megold√°s nem fokozatos pr√≥b√°lkoz√°sokkal,
hanem egy **hirtelen felismer√©ssel** (aha-√©lm√©ny) jelenik meg.

Ez a szimul√°ci√≥ egy **aktiv√°ci√≥s t√©rk√©pen** modellezi a tapasztalati tanul√°st,
ahol az aktiv√°ci√≥ egy adott k√ºsz√∂b felett **bel√°t√°st** v√°lt ki.
""")

    # Param√©terek
    st.sidebar.header("üîß Param√©terek")
    grid_size = st.sidebar.slider("üìè R√°cs m√©rete", 5, 50, 20)
    episodes = st.sidebar.slider("üîÅ Epiz√≥dok sz√°ma", 1, 200, 50)
    activation_increment = st.sidebar.slider("‚ö° Aktiv√°ci√≥ n√∂veked√©s (ŒîA)", 0.1, 5.0, 1.0)
    aha_threshold = st.sidebar.slider("üéØ Bel√°t√°si k√ºsz√∂b (Œ∏)", 1.0, 20.0, 10.0)
    sigma = st.sidebar.slider("üß† Ment√°lis sim√≠t√°s (œÉ)", 0.0, 3.0, 1.0)

    # Aktiv√°ci√≥s t√©rk√©p gener√°l√°sa
    def generate_activation_map(grid_size, episodes, increment, sigma):
        activation_map = np.zeros((grid_size, grid_size))
        for _ in range(episodes):
            x, y = np.random.randint(0, grid_size, 2)
            activation_map[x, y] += increment
        if sigma > 0:
            activation_map = gaussian_filter(activation_map, sigma=sigma)
        return activation_map

    activation_map = generate_activation_map(grid_size, episodes, activation_increment, sigma)
    center = grid_size // 2
    center_activation = activation_map[center, center]
    insight_occurred = center_activation >= aha_threshold

    # Aktiv√°ci√≥s t√©rk√©p ‚Äì 2D
    st.header("üó∫Ô∏è Aktiv√°ci√≥s t√©rk√©p (2D)")
    fig2d, ax2d = plt.subplots()
    cax = ax2d.imshow(activation_map, cmap="plasma")
    fig2d.colorbar(cax, ax=ax2d, label="Aktiv√°ci√≥")
    ax2d.set_title("Aktiv√°ci√≥ eloszl√°s")
    st.pyplot(fig2d)

    # Aktiv√°ci√≥s felsz√≠n ‚Äì 3D
    st.header("üåê Aktiv√°ci√≥s felsz√≠n (3D)")
    x, y = np.meshgrid(np.arange(grid_size), np.arange(grid_size))
    fig3d = go.Figure(data=[go.Surface(z=activation_map, x=x, y=y, colorscale="Inferno")])
    fig3d.update_layout(
        scene=dict(
            xaxis_title="Neuron X",
            yaxis_title="Neuron Y",
            zaxis_title="Aktiv√°ci√≥"
        ),
        margin=dict(l=0, r=0, t=50, b=0)
    )
    st.plotly_chart(fig3d, use_container_width=True)

    # Eredm√©ny
    st.header("üìå Bel√°t√°s eredm√©nye")
    if insight_occurred:
        st.success(f"‚úÖ Bel√°t√°s megt√∂rt√©nt! A k√∂z√©ppont aktiv√°ci√≥ja: {center_activation:.2f} ‚â• {aha_threshold}")
    else:
        st.warning(f"‚ùå Nem t√∂rt√©nt bel√°t√°s. A k√∂z√©ppont aktiv√°ci√≥ja: {center_activation:.2f} < {aha_threshold}")

    # CSV export
    st.header("üíæ CSV export√°l√°s")
    csv = "\n".join([",".join(map(str, row)) for row in activation_map])
    st.download_button("‚¨áÔ∏è Aktiv√°ci√≥s t√©rk√©p let√∂lt√©se", csv.encode("utf-8"), file_name="activation_map.csv")

    # Tudom√°nyos h√°tt√©r
    st.header("üìò Tudom√°nyos h√°tt√©r")

    st.latex(r"""
    \text{Aktiv√°ci√≥:} \quad A_{i,j}^{(t+1)} = A_{i,j}^{(t)} + \Delta A
    """)
    st.latex(r"""
    \text{Bel√°t√°s felt√©tele:} \quad A_{\text{goal}} \geq \theta
    """)

    st.markdown("""
A neuronh√°l√≥zat aktiv√°ci√≥ja minden epiz√≥dban n√∂vekszik egy v√©letlenszer≈± s√©ta sor√°n.

- $A_{i,j}^{(t)}$: aktiv√°ci√≥ a $(i,j)$ poz√≠ci√≥n a $t$-edik id≈ël√©p√©sben  
- $\Delta A$: aktiv√°ci√≥s n√∂veked√©s l√©p√©senk√©nt  
- $\theta$: bel√°t√°si k√ºsz√∂b ‚Äì ha ezt a c√©lpoz√≠ci√≥ aktiv√°ci√≥ja el√©ri, megt√∂rt√©nik az ‚Äûaha!‚Äù pillanat

---

### üéì K√∂vetkeztet√©sek

- A bel√°t√°s akkor val√≥sul meg, amikor az aktiv√°ci√≥ koncentr√°ltan gy≈±lik √∂ssze egy r√©gi√≥ban.
- A `œÉ` √©rt√©k szab√°lyozza a **ment√°lis sim√≠t√°s** m√©rt√©k√©t.
- A szimul√°ci√≥ **nem determinisztikus**, teh√°t ugyanazon param√©terekkel is m√°s eredm√©ny ad√≥dhat.

Ez a modell egy leegyszer≈±s√≠tett, de j√≥l illusztr√°lt n√©zete a bel√°t√°sos tanul√°si folyamatnak.
""")

# Rendszerilleszt√©shez:
app = run

"""
Fractal Dimension Module ‚Äì Box Counting m√≥dszerrel.

Ez a modul lehet≈ëv√© teszi k√ºl√∂nf√©le pontfelh≈ëk frakt√°l dimenzi√≥j√°nak becsl√©s√©t
a box counting algoritmus seg√≠ts√©g√©vel, valamint a zajra val√≥ √©rz√©kenys√©g vizsg√°lat√°t.

Felhaszn√°l√°si ter√ºletek:
- Kaotikus rendszerek anal√≠zise
- Topol√≥giai komplexit√°s jellemz√©se
- Mint√°zatok kvantitat√≠v m√©r√©se nemline√°ris dinamik√°ban
"""

import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import plotly.graph_objects as go
from scipy.spatial import distance_matrix

def generate_cloud(kind, n_points=300):
    if kind == "Szimmetrikus spir√°l":
        theta = np.linspace(0, 4 * np.pi, n_points)
        r = np.linspace(0.1, 1, n_points)
        x = r * np.cos(theta)
        y = r * np.sin(theta)
        return np.vstack([x, y]).T
    elif kind == "Lorenz-projekci√≥":
        x, y, z = [0], [1], [1.05]
        dt, a, b, c = 0.01, 10, 28, 8/3
        for _ in range(n_points):
            dx = a * (y[-1] - x[-1])
            dy = x[-1] * (b - z[-1]) - y[-1]
            dz = x[-1] * y[-1] - c * z[-1]
            x.append(x[-1] + dx * dt)
            y.append(y[-1] + dy * dt)
            z.append(z[-1] + dz * dt)
        return np.vstack([x, y]).T
    elif kind == "Random felh≈ë":
        return np.random.rand(n_points, 2)
    else:
        return np.zeros((n_points, 2))

def box_counting_grid(data, grid_size=100):
    """
    Pontfelh≈ët egy r√°csba renderel √©s visszaadja a s≈±r≈±s√©gi m√°trixot (Z) 3D vizualiz√°ci√≥hoz.
    """
    x = data[:, 0]
    y = data[:, 1]
    H, xedges, yedges = np.histogram2d(x, y, bins=grid_size)
    Z = H.T  # Meg kell transzpon√°lni, hogy j√≥l jelenjen meg Plotly-ban
    return Z

def run():
    st.title("üßÆ Frakt√°l Dimenzi√≥ ‚Äì Box Counting m√≥dszerrel")

    st.markdown("""
A frakt√°l dimenzi√≥ egy kvantitat√≠v m√©r≈ësz√°m, amely azt mutatja meg, hogy egy geometriai objektum
milyen komplexit√°ssal t√∂lti ki a teret. A **box counting** m√≥dszer seg√≠ts√©g√©vel egy mint√°zat frakt√°l dimenzi√≥j√°t
becs√ºlhetj√ºk meg.

A dimenzi√≥ kisz√°m√≠t√°sa a k√∂vetkez≈ë:

$$
D = \\lim_{\\varepsilon \\to 0} \\frac{\\log N(\\varepsilon)}{\\log (1/\\varepsilon)}
$$

Ahol:
- \( N(\\varepsilon) \): az Œµ m√©ret≈± dobozok sz√°ma, amik lefedik a mint√°zatot
""")

    kind = st.selectbox("üîò Pontfelh≈ë t√≠pusa", ["Szimmetrikus spir√°l", "Lorenz-projekci√≥", "Random felh≈ë"])
    n_points = st.slider("üìä Pontok sz√°ma", 100, 1000, 300, step=50)
    eps_start = st.slider("üìè Kezd≈ë Œµ (log10 sk√°l√°n)", -2.0, 0.0, -1.0)
    eps_end = st.slider("üìè V√©gs≈ë Œµ (log10 sk√°l√°n)", -1.5, -0.1, -0.5)
    steps = st.slider("üìà L√©p√©sek sz√°ma", 5, 20, 10)
    noise_level = st.slider("üìâ Zajszint (%)", 0, 50, 0)

    data = generate_cloud(kind, n_points)
    if noise_level > 0:
        data += np.random.randn(*data.shape) * (noise_level / 100)

    epsilons = np.logspace(eps_start, eps_end, steps)
    counts = []
    for eps in epsilons:
        min_vals = np.min(data, axis=0)
        max_vals = np.max(data, axis=0)
        grid = np.floor((data - min_vals) / eps).astype(int)
        unique_boxes = np.unique(grid, axis=0)
        counts.append(len(unique_boxes))

    logs = np.log(1 / epsilons)
    logN = np.log(counts)
    slope, intercept = np.polyfit(logs, logN, 1)

    st.subheader("üåÄ Mint√°zat")
    fig1, ax1 = plt.subplots()
    ax1.scatter(data[:, 0], data[:, 1], s=5)
    ax1.set_title("Pontfelh≈ë")
    ax1.axis("equal")
    st.pyplot(fig1)

    st.subheader("üìê Box Counting eredm√©ny")
    fig2, ax2 = plt.subplots()
    ax2.plot(logs, logN, "o-", label="M√©rt √©rt√©kek")
    ax2.plot(logs, slope * logs + intercept, "--", label=f"Illesztett egyenes (D ‚âà {slope:.2f})")
    ax2.set_xlabel("log(1/Œµ)")
    ax2.set_ylabel("log(N(Œµ))")
    ax2.set_title("Box Counting")
    ax2.legend()
    st.pyplot(fig2)

    st.subheader("üß± 3D vizualiz√°ci√≥ s≈±r≈±s√©g alapj√°n")
    Z = box_counting_grid(data, grid_size=100)
    x = np.arange(Z.shape[1])
    y = np.arange(Z.shape[0])
    x, y = np.meshgrid(x, y)
    fig3d = go.Figure(data=[go.Surface(z=Z, x=x, y=y, colorscale="Inferno")])
    fig3d.update_layout(title="3D frakt√°l s≈±r≈±s√©g", autosize=True)
    st.plotly_chart(fig3d)

    st.subheader("üì• CSV export")
    df = pd.DataFrame({
        "epsilon": epsilons,
        "N(epsilon)": counts,
        "log(1/epsilon)": logs,
        "log(N(epsilon))": logN
    })
    csv = df.to_csv(index=False).encode("utf-8")
    st.download_button("‚¨áÔ∏è Eredm√©ny let√∂lt√©se CSV-ben", data=csv, file_name="box_counting_results.csv")

    st.markdown("### üìö Tudom√°nyos h√°tt√©r")
    st.markdown("""
A **frakt√°l dimenzi√≥** nem felt√©tlen√ºl eg√©sz sz√°m ‚Äì gyakran nemline√°ris dinamikus rendszerekb≈ël sz√°rmaz√≥ adatok jellemz√©s√©re haszn√°lj√°k.  
A **box counting m√≥dszer** egy egyszer≈±, de hat√©kony elj√°r√°s a frakt√°l dimenzi√≥ k√∂zel√≠t√©s√©re.

**Tipikus frakt√°l dimenzi√≥k:**
- Vonal: 1.0  
- Fel√ºlet: 2.0  
- Kaotikus attraktor: 1.2 ‚Äì 1.9 k√∂z√∂tt

**Jelent≈ës√©ge:**
- A mint√°zat ‚Äûkomplexit√°s√°nak‚Äù vagy ‚Äûs≈±r≈±s√©g√©nek‚Äù kvantifik√°l√°sa
- Topol√≥giai √©s geometriai tulajdons√°gok le√≠r√°sa nemline√°ris rendszerekben
- Zaj√©rz√©kenys√©g tesztel√©se √©s vizsg√°lata

A 3D felsz√≠n az adat s≈±r≈±s√©g√©t jelen√≠ti meg, mely vizu√°lisan is kiemeli a frakt√°los strukt√∫r√°kat.
""")

app = run

import streamlit as st import numpy as np import matplotlib.pyplot as plt import pandas as pd from scipy.stats import entropy import plotly.graph_objects as go

Shannon-entr√≥pia sz√°m√≠t√°sa

def shannon_entropy(signal, bins): hist, _ = np.histogram(signal, bins=bins, density=True) hist = hist[hist > 0] return entropy(hist, base=2)

Renyi-entr√≥pia

def renyi_entropy(signal, alpha, bins): hist, _ = np.histogram(signal, bins=bins, density=True) hist = hist[hist > 0] if alpha == 1.0: return entropy(hist, base=2) return 1 / (1 - alpha) * np.log2(np.sum(hist ** alpha))

Jelszimul√°ci√≥

def generate_signal(kind, length, noise): t = np.linspace(0, 4 * np.pi, length) if kind == "Szinusz": sig = np.sin(t) elif kind == "K√°osz (logisztikus)": sig = np.zeros(length) sig[0] = 0.5 r = 3.9 for i in range(1, length): sig[i] = r * sig[i - 1] * (1 - sig[i - 1]) elif kind == "Feh√©r zaj": sig = np.random.randn(length) else: sig = np.zeros(length) return sig + np.random.normal(0, noise, size=length)

Multi-sk√°l√°s entr√≥pia sz√°m√≠t√°sa

def compute_multiscale_entropy(signal, bins, entropy_type, alpha, scales): mse = [] for scale in scales: if scale <= 1: coarse = signal else: n = len(signal) // scale coarse = np.mean(signal[:n * scale].reshape((n, scale)), axis=1)

if entropy_type == "Shannon":
        h = shannon_entropy(coarse, bins)
    else:
        h = renyi_entropy(coarse, alpha, bins)
    mse.append(h)
return mse

def run(): st.title("üßê Neur√°lis Entr√≥pia Id≈ësorokon") st.markdown(""" Vizsg√°ld meg, hogyan v√°ltozik az entr√≥pia k√ºl√∂nb√∂z≈ë t√≠pus√∫ id≈ëjelek eset√©n. Hasznos lehet neur√°lis aktivit√°sok, ESN-kimenetek, vagy szimul√°lt EEG elemz√©s√©hez. """)

kind = st.selectbox("Jel t√≠pusa", ["Szinusz", "K√°osz (logisztikus)", "Feh√©r zaj"])
noise = st.slider("Zajszint (œÉ)", 0.0, 1.0, 0.1, step=0.01)
signal_len = st.slider("Jel hossza", 200, 5000, 1000, step=100)
window = st.slider("Ablakm√©ret", 50, 500, 200, step=10)
stride = st.slider("L√©p√©sk√∂z", 10, 200, 50, step=10)
bins = st.slider("Hisztogram bin sz√°m", 5, 100, 30)
entropy_type = st.selectbox("Entr√≥pia t√≠pusa", ["Shannon", "Renyi"])
alpha = 1.0
if entropy_type == "Renyi":
    alpha = st.slider("Renyi Œ± param√©ter", 0.1, 5.0, 2.0, step=0.1)

sig = generate_signal(kind, signal_len, noise)
entropies = []
times = []

for start in range(0, len(sig) - window, stride):
    segment = sig[start:start + window]
    if entropy_type == "Shannon":
        h = shannon_entropy(segment, bins)
    else:
        h = renyi_entropy(segment, alpha, bins)
    entropies.append(h)
    times.append(start)

st.subheader("üìâ Entr√≥pia id≈ëben")
fig, ax = plt.subplots()
ax.plot(times, entropies, marker='o', label="Entr√≥pia")
ax.set_xlabel("Id≈ë (mintav√©teli index)")
ax.set_ylabel("Entr√≥pia (bit)")
ax.set_title("Entr√≥pia g√∂rbe")
ax.grid(True)
st.pyplot(fig)

st.subheader("üßà 3D entr√≥pia vizualiz√°ci√≥")
fig3d = go.Figure(data=[go.Scatter3d(
    x=times,
    y=[noise]*len(times),
    z=entropies,
    mode='lines+markers',
    marker=dict(size=4, color=entropies, colorscale='Viridis'),
    line=dict(width=2)
)])
fig3d.update_layout(
    scene=dict(
        xaxis_title='Id≈ë',
        yaxis_title='Zajszint',
        zaxis_title='Entr√≥pia'
    ),
    margin=dict(l=0, r=0, b=0, t=40),
    title="Entr√≥pia t√©rbeli reprezent√°ci√≥ja"
)
st.plotly_chart(fig3d, use_container_width=True)

# Multi-sk√°l√°s entr√≥pia megjelen√≠t√©s
st.subheader("üåç Multi-sk√°l√°s entr√≥pia")
scale_range = st.slider("Sk√°l√°k (ablak aggreg√°ci√≥)", 1, 50, (1, 10))
scales = list(range(scale_range[0], scale_range[1] + 1))
mse_values = compute_multiscale_entropy(sig, bins, entropy_type, alpha, scales)

fig_mse, ax_mse = plt.subplots()
ax_mse.plot(scales, mse_values, marker='s')
ax_mse.set_xlabel("Sk√°la (aggreg√°lt ablakm√©ret)")
ax_mse.set_ylabel("Entr√≥pia (bit)")
ax_mse.set_title("Multi-sk√°l√°s entr√≥pia")
ax_mse.grid(True)
st.pyplot(fig_mse)

# Export CSV
st.subheader("üìÖ Export")
df = pd.DataFrame({
    "index": times,
    "entropy": entropies,
    "signal_type": kind,
    "noise": noise,
    "alpha": alpha if entropy_type == "Renyi" else np.nan,
    "entropy_type": entropy_type
})
csv = df.to_csv(index=False).encode("utf-8")
st.download_button("Let√∂lt√©s CSV-ben", data=csv, file_name="entropy_time_series.csv")

st.markdown("""
### üìö Matematikai h√°tt√©r
Az entr√≥pia a rendezetlens√©g vagy inform√°ci√≥mennyis√©g m√©rt√©ke.

- **Shannon-entr√≥pia**: az inform√°ci√≥el√©let klasszikus m√©rt√©ke.
- **Renyi-entr√≥pia**: √°ltal√°nos√≠t√°s, √©rz√©kenyebb lehet ritka vagy gyakori mint√°kra (f√ºgg az ÓÄÅ\alphaÓÄÅ-t√≥l).
- **Multi-sk√°l√°s entr√≥pia**: az inform√°ci√≥ komplexit√°s√°nak sk√°laf√ºgg≈ë m√©r√©se, hasznos neur√°lis dinamika id≈ësk√°l√°inak felt√©rk√©pez√©s√©re.
""")

app = run


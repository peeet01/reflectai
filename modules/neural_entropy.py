import streamlit as st
import numpy as np
import pandas as pd
from scipy.stats import entropy
import matplotlib.pyplot as plt
import plotly.graph_objects as go

# Shannon-entr√≥pia sz√°m√≠t√°sa
def shannon_entropy(signal, bins):
    hist, _ = np.histogram(signal, bins=bins, density=True)
    hist = hist[hist > 0]
    return entropy(hist, base=2)

# Renyi-entr√≥pia sz√°m√≠t√°sa
def renyi_entropy(signal, alpha, bins):
    hist, _ = np.histogram(signal, bins=bins, density=True)
    hist = hist[hist > 0]
    if alpha == 1.0:
        return entropy(hist, base=2)
    return 1 / (1 - alpha) * np.log2(np.sum(hist ** alpha))

# Szintetikus jel gener√°l√°sa
def generate_signal(kind, length, noise):
    t = np.linspace(0, 4 * np.pi, length)
    if kind == "Szinusz":
        sig = np.sin(t)
    elif kind == "K√°osz (logisztikus)":
        sig = np.zeros(length)
        sig[0] = 0.5
        r = 3.9
        for i in range(1, length):
            sig[i] = r * sig[i - 1] * (1 - sig[i - 1])
    elif kind == "Feh√©r zaj":
        sig = np.random.randn(length)
    else:
        sig = np.zeros(length)
    return sig + np.random.normal(0, noise, size=length)

def app():
    st.title("üß† Neur√°lis Entr√≥pia Id≈ësorokon")

    kind = st.selectbox("Jel t√≠pusa", ["Szinusz", "K√°osz (logisztikus)", "Feh√©r zaj"])
    noise = st.slider("Zajszint (œÉ)", 0.0, 1.0, 0.1, step=0.01)
    signal_len = st.slider("Jel hossza", 200, 5000, 1000, step=100)
    window = st.slider("Ablakm√©ret", 50, 500, 200, step=10)
    stride = st.slider("L√©p√©sk√∂z", 10, 200, 50, step=10)
    bins = st.slider("Hisztogram bin sz√°m", 5, 100, 30)
    entropy_type = st.selectbox("Entr√≥pia t√≠pusa", ["Shannon", "Renyi"])
    alpha = 1.0
    if entropy_type == "Renyi":
        alpha = st.slider("Renyi Œ± param√©ter", 0.1, 5.0, 2.0, step=0.1)

    sig = generate_signal(kind, signal_len, noise)
    entropies = []
    times = []

    for start in range(0, len(sig) - window, stride):
        segment = sig[start:start + window]
        if entropy_type == "Shannon":
            h = shannon_entropy(segment, bins)
        else:
            h = renyi_entropy(segment, alpha, bins)
        entropies.append(h)
        times.append(start)

    # 2D plot
    st.subheader("üìâ Entr√≥pia id≈ëben")
    fig, ax = plt.subplots()
    ax.plot(times, entropies, marker='o')
    ax.set_xlabel("Id≈ë (mintav√©teli index)")
    ax.set_ylabel("Entr√≥pia (bit)")
    ax.set_title("Entr√≥pia g√∂rbe")
    ax.grid(True)
    st.pyplot(fig)

    # 3D plot
    st.subheader("üåê 3D entr√≥piafel√ºlet")
    x = np.array(times)
    y = np.zeros_like(x)
    z = np.array(entropies)

    fig3d = go.Figure(data=[go.Scatter3d(
        x=x,
        y=y,
        z=z,
        mode='lines+markers',
        marker=dict(size=4, color=z, colorscale='Viridis'),
        line=dict(color='blue', width=2)
    )])
    fig3d.update_layout(scene=dict(
        xaxis_title="Id≈ë",
        yaxis_title="T√≠pusindex",
        zaxis_title="Entr√≥pia (bit)"
    ))
    st.plotly_chart(fig3d, use_container_width=True)

    # Export CSV
    st.subheader("üì• Export")
    df = pd.DataFrame({"index": times, "entropy": entropies})
    csv = df.to_csv(index=False).encode("utf-8")
    st.download_button("Let√∂lt√©s CSV-ben", data=csv, file_name="entropy_time_series.csv")

    # Matematikai h√°tt√©r (egys√©ges latex)
    st.markdown("### üìò R√©nyi-entr√≥pia")

    st.markdown("""
    A R√©nyi-entr√≥pia a Shannon-entr√≥pia egy √°ltal√°nos√≠t√°sa, amely egy szabadon v√°laszthat√≥ param√©ter (alfa) seg√≠ts√©g√©vel k√ºl√∂nb√∂z≈ë aspektusaira √©rz√©keny az eloszl√°snak.

    - **Kis alfa √©rt√©k** eset√©n √©rz√©keny a ritka esem√©nyekre
    - **Nagy alfa √©rt√©k** eset√©n √©rz√©keny a gyakori mint√°kra
    - Ha az alfa = 1, akkor visszaadja a Shannon-entr√≥pi√°t

    **Mi√©rt hasznos?**  
    A R√©nyi-entr√≥pia lehet≈ëv√© teszi, hogy k√ºl√∂nf√©le neur√°lis mint√°zatokat √©s sk√°l√°n m≈±k√∂d≈ë aktivit√°sokat finoman megk√ºl√∂nb√∂ztess√ºnk ‚Äì p√©ld√°ul √©rz√©kenyebben detekt√°lhatja az epilepszi√°s vagy k√≥ros √°llapotokat, illetve az agy dinamikai sokf√©les√©g√©t.
    """)


    ### üß† Alkalmaz√°s idegtudom√°nyban

    Az entr√≥pi√°k elemz√©se seg√≠thet meg√©rteni a neur√°lis rendszerek **komplexit√°s√°t √©s rendezetts√©g√©t**:

    - **Alacsony entr√≥pia**  ism√©tl≈ëd≈ë, kisz√°m√≠that√≥ dinamika (pl. epilepszi√°s mint√°zat)
    - **Magas entr√≥pia**  v√°ltozatos, adapt√≠v aktivit√°s (pl. figyelem, tanul√°s)
    - **R√©nyi-entr√≥pia** finomhangolhat√≥ a k√ºl√∂nb√∂z≈ë dinamik√°kra, √©rz√©kenyen jelzi a szinkronit√°s vagy a k√°osz jelenl√©t√©t

    Haszn√°lhat√≥ pl. **ESN kimenetek**, **EEG jelek** vagy m√°s id≈ëalap√∫ idegrendszeri szign√°lok rendezetts√©g√©nek becsl√©s√©re.
    st.markdown("""
    A Shannon- √©s R√©nyi-entr√≥pia az inform√°ci√≥mennyis√©g m√©r√©s√©re szolg√°l√≥ kvantitat√≠v mutat√≥k...
    """)
    # Fontos: csak akkor fut le, ha lok√°lisan teszteled (a deployhoz NE √≠rd be)
    # if __name__ == "__main__":
    #     app()

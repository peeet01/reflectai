import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from scipy.stats import entropy
import plotly.graph_objects as go

def shannon_entropy(signal, bins):
    hist, _ = np.histogram(signal, bins=bins, density=True)
    hist = hist[hist > 0]
    return entropy(hist, base=2)

def renyi_entropy(signal, alpha, bins):
    hist, _ = np.histogram(signal, bins=bins, density=True)
    hist = hist[hist > 0]
    if alpha == 1.0:
        return entropy(hist, base=2)
    return 1 / (1 - alpha) * np.log2(np.sum(hist ** alpha))

def generate_signal(kind, length, noise):
    t = np.linspace(0, 4 * np.pi, length)
    if kind == "Szinusz":
        sig = np.sin(t)
    elif kind == "K√°osz (logisztikus)":
        sig = np.zeros(length)
        sig[0] = 0.5
        r = 3.9
        for i in range(1, length):
            sig[i] = r * sig[i - 1] * (1 - sig[i - 1])
    elif kind == "Feh√©r zaj":
        sig = np.random.randn(length)
    else:
        sig = np.zeros(length)
    return sig + np.random.normal(0, noise, size=length)

def run():
    st.title("üß† Neur√°lis Entr√≥pia Id≈ësorokon")
    st.markdown("""
    Vizsg√°ld meg, hogyan v√°ltozik az entr√≥pia k√ºl√∂nb√∂z≈ë t√≠pus√∫ id≈ëjelek eset√©n.
    Hasznos lehet neur√°lis aktivit√°sok, ESN-kimenetek, vagy szimul√°lt EEG elemz√©s√©hez.
    """)

    kind = st.selectbox("Jel t√≠pusa", ["Szinusz", "K√°osz (logisztikus)", "Feh√©r zaj"])
    noise = st.slider("Zajszint (œÉ)", 0.0, 1.0, 0.1, step=0.01)
    signal_len = st.slider("Jel hossza", 200, 5000, 1000, step=100)
    window = st.slider("Ablakm√©ret", 50, 500, 200, step=10)
    stride = st.slider("L√©p√©sk√∂z", 10, 200, 50, step=10)
    bins = st.slider("Hisztogram bin sz√°m", 5, 100, 30)
    entropy_type = st.selectbox("Entr√≥pia t√≠pusa", ["Shannon", "Renyi"])
    alpha = 1.0
    if entropy_type == "Renyi":
        alpha = st.slider("Renyi Œ± param√©ter", 0.1, 5.0, 2.0, step=0.1)

    sig = generate_signal(kind, signal_len, noise)
    entropies = []
    times = []

    for start in range(0, len(sig) - window, stride):
        segment = sig[start:start + window]
        if entropy_type == "Shannon":
            h = shannon_entropy(segment, bins)
        else:
            h = renyi_entropy(segment, alpha, bins)
        entropies.append(h)
        times.append(start)

    st.subheader("üìâ Entr√≥pia id≈ëben")
    fig, ax = plt.subplots()
    ax.plot(times, entropies, marker='o', label="Entr√≥pia")
    ax.set_xlabel("Id≈ë (mintav√©teli index)")
    ax.set_ylabel("Entr√≥pia (bit)")
    ax.set_title("Entr√≥pia g√∂rbe")
    ax.grid(True)
    st.pyplot(fig)

    st.subheader("üìä 3D Entr√≥pia Vizu√°liz√°ci√≥")
    fig3d = go.Figure(data=[go.Scatter3d(
        x=times,
        y=sig[:len(times)],
        z=entropies,
        mode='lines+markers',
        marker=dict(size=4, color=entropies, colorscale='Viridis'),
        line=dict(width=2)
    )])
    fig3d.update_layout(
        scene=dict(
            xaxis_title='Id≈ë',
            yaxis_title='Jel√©rt√©k',
            zaxis_title='Entr√≥pia'
        ),
        margin=dict(l=0, r=0, b=0, t=30)
    )
    st.plotly_chart(fig3d)

    st.subheader("üì• Export")
    df = pd.DataFrame({"index": times, "entropy": entropies})
    csv = df.to_csv(index=False).encode("utf-8")
    st.download_button("Let√∂lt√©s CSV-ben", data=csv, file_name="entropy_time_series.csv")

    st.markdown("""
### üìö Matematikai h√°tt√©r

#### Shannon-entr√≥pia

A **Shannon-entr√≥pia** az inform√°ci√≥elm√©let alapfogalma, amely megadja az √°tlagos inform√°ci√≥tartalmat egy val√≥sz√≠n≈±s√©gi eloszl√°s alapj√°n. A k√©plete:

$$
H = -\\sum_i p_i \\log_2 p_i
$$

ahol $p_i$ az egyes √°llapotok val√≥sz√≠n≈±s√©ge. Magas entr√≥pia nagy rendezetlens√©get jelez, m√≠g alacsony entr√≥pia eset√©n az eloszl√°s koncentr√°lt.

#### R√©nyi-entr√≥pia

A **R√©nyi-entr√≥pia** a Shannon-entr√≥pia √°ltal√°nos√≠t√°sa, amely az al√°bbi formul√°val sz√°m√≠that√≥:

$$
H_\\alpha = \\frac{1}{1 - \\alpha} \\log_2 \\left( \\sum_i p_i^\\alpha \\right)
$$

ahol $\\alpha > 0$ √©s $\\alpha \\ne 1$. Kis $\\alpha$ eset√©n √©rz√©kenyebb a ritka esem√©nyekre, m√≠g nagy $\\alpha$ eset√©n a domin√°ns mint√°zatokat hangs√∫lyozza.

#### Idegtudom√°nyi alkalmaz√°s

Az entr√≥pia seg√≠thet meg√©rteni az idegi rendszerek komplexit√°s√°t √©s rendezetts√©g√©t:

- **Alacsony entr√≥pia**: ism√©tl≈ëd≈ë, j√≥l kisz√°m√≠that√≥ dinamika (pl. epilepszi√°s aktivit√°s)
- **Magas entr√≥pia**: komplex, soksz√≠n≈± agyi aktivit√°s
- A R√©nyi-entr√≥pia param√©tere lehet≈ëv√© teszi k√ºl√∂nb√∂z≈ë id≈ëbeli mint√°zatok szelekt√≠v kiemel√©s√©t.
""")

app = run

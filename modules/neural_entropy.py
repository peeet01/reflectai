import streamlit as st
import numpy as np
import pandas as pd
from scipy.stats import entropy
import matplotlib.pyplot as plt
import plotly.graph_objects as go

# Shannon-entr√≥pia
def shannon_entropy(signal, bins):
    hist, _ = np.histogram(signal, bins=bins, density=True)
    hist = hist[hist > 0]
    return entropy(hist, base=2)

# R√©nyi-entr√≥pia
def renyi_entropy(signal, alpha, bins):
    hist, _ = np.histogram(signal, bins=bins, density=True)
    hist = hist[hist > 0]
    if alpha == 1.0:
        return entropy(hist, base=2)
    return 1 / (1 - alpha) * np.log2(np.sum(hist ** alpha))

# Jelszimul√°ci√≥
def generate_signal(kind, length, noise):
    t = np.linspace(0, 4 * np.pi, length)
    if kind == "Szinusz":
        sig = np.sin(t)
    elif kind == "K√°osz (logisztikus)":
        sig = np.zeros(length)
        sig[0] = 0.5
        r = 3.9
        for i in range(1, length):
            sig[i] = r * sig[i - 1] * (1 - sig[i - 1])
    elif kind == "Feh√©r zaj":
        sig = np.random.randn(length)
    else:
        sig = np.zeros(length)
    return sig + np.random.normal(0, noise, size=length)

def run():
    st.title("üß† Neur√°lis Entr√≥pia Id≈ësorokon")
    st.markdown("""
    Vizsg√°ld meg, hogyan v√°ltozik az entr√≥pia k√ºl√∂nb√∂z≈ë t√≠pus√∫ id≈ëjelek eset√©n.
    Hasznos lehet neur√°lis aktivit√°sok, ESN-kimenetek, vagy szimul√°lt EEG elemz√©s√©hez.
    """)

    kind = st.selectbox("Jel t√≠pusa", ["Szinusz", "K√°osz (logisztikus)", "Feh√©r zaj"])
    noise = st.slider("Zajszint (œÉ)", 0.0, 1.0, 0.1, step=0.01)
    signal_len = st.slider("Jel hossza", 200, 5000, 1000, step=100)
    window = st.slider("Ablakm√©ret", 50, 500, 200, step=10)
    stride = st.slider("L√©p√©sk√∂z", 10, 200, 50, step=10)
    bins = st.slider("Hisztogram bin sz√°m", 5, 100, 30)
    entropy_type = st.selectbox("Entr√≥pia t√≠pusa", ["Shannon", "Renyi"])
    alpha = 1.0
    if entropy_type == "Renyi":
        alpha = st.slider("Renyi Œ± param√©ter", 0.1, 5.0, 2.0, step=0.1)

    sig = generate_signal(kind, signal_len, noise)
    entropies = []
    times = []

    for start in range(0, len(sig) - window, stride):
        segment = sig[start:start + window]
        if entropy_type == "Shannon":
            h = shannon_entropy(segment, bins)
        else:
            h = renyi_entropy(segment, alpha, bins)
        entropies.append(h)
        times.append(start)

    # 2D matplotlib plot
    st.subheader("üìâ Entr√≥pia id≈ëben")
    fig, ax = plt.subplots()
    ax.plot(times, entropies, marker='o')
    ax.set_xlabel("Id≈ë (mintav√©teli index)")
    ax.set_ylabel("Entr√≥pia (bit)")
    ax.set_title("Entr√≥pia g√∂rbe")
    ax.grid(True)
    st.pyplot(fig)

    # 3D Plotly surface plot
    st.subheader("üåê 3D Entr√≥piafel√ºlet (id≈ë, jelt√≠pus, entr√≥pia)")
    x = np.array(times)
    y = np.array([0])  # k√©s≈ëbb b≈ëv√≠thet≈ë t√∂bb jelt√≠pusra
    z = np.expand_dims(entropies, axis=0)  # 1 sor√∫ 2D m√°trix

    fig3d = go.Figure(data=[go.Surface(z=z, x=[x], y=[y], colorscale='Viridis')])
    fig3d.update_layout(
        scene=dict(
            xaxis_title="Id≈ë",
            yaxis_title="T√≠pusindex",
            zaxis_title="Entr√≥pia (bit)"
        ),
        height=500
    )
    st.plotly_chart(fig3d, use_container_width=True)

    # Export
    st.subheader("üì• Export")
    df = pd.DataFrame({"index": times, "entropy": entropies})
    csv = df.to_csv(index=False).encode("utf-8")
    st.download_button("Let√∂lt√©s CSV-ben", data=csv, file_name="entropy_time_series.csv")

    # Tudom√°nyos magyar√°zat
    st.markdown("""
    ### üìö Matematikai h√°tt√©r

    Az **entr√≥pia** m√©rt√©ke annak, mennyire v√©letlenszer≈±, rendezetlen vagy inform√°ci√≥ban gazdag egy jel.

    - **Shannon-entr√≥pia** az inform√°ci√≥elm√©let alapfogalma. Ha a val√≥sz√≠n≈±s√©gi eloszl√°s ÓÄÅp_iÓÄÅ, akkor:

\[
        H = -\sum_i p_i \log_2 p_i
\]

      Ez kifejezi az √°tlagos inform√°ci√≥mennyis√©get.

    - **R√©nyi-entr√≥pia** √°ltal√°nos√≠t√°s, √©rz√©kenyebb lehet extr√©m esem√©nyekre vagy domin√°ns mint√°kra:

\[
        H_\alpha = \frac{1}{1 - \alpha} \log_2 \sum_i p_i^\alpha
\]

      Az ÓÄÅ\alphaÓÄÅ param√©ter szab√°lyozza a s√∫lyoz√°st: kis ÓÄÅ\alphaÓÄÅ-val a ritka esem√©nyek domin√°lnak, nagy ÓÄÅ\alphaÓÄÅ-val a gyakoriak.

    #### üî¨ Alkalmaz√°s neurol√≥giai rendszerekre

    - A **neur√°lis jelek entr√≥pi√°ja** korrel√°lhat az √©bers√©gi √°llapottal (pl. alv√°s vs. √©brenl√©t)
    - Az entr√≥piacs√∂kken√©s a rendszer **szinkroniz√°ci√≥j√°ra** utal (pl. rohamaktivit√°s)
    - A R√©nyi-entr√≥pia √©rz√©kenyebb lehet **lok√°lis mint√°zatokra**, p√©ld√°ul t√ºskes≈±r≈±s√©g, esem√©nyritmus

    Ez az eszk√∂z teh√°t nemcsak vizualiz√°ci√≥ra, hanem **kutat√°si c√©lokra is alkalmas**, p√©ld√°ul:
    - ESN rejtett r√©teg√©nek entr√≥pi√°j√°nak monitoroz√°sa
    - k√ºl√∂nf√©le jelt√≠pusok megk√ºl√∂nb√∂ztet√©se
    - entr√≥piaalap√∫ klaszterez√©s vagy anom√°lia-√©rz√©kel√©s

    """)

# ReflectAI kompatibilis bel√©p√©si pont
app = run

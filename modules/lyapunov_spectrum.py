import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import plotly.graph_objects as go

# ==== 1D dinamikus lek√©pez√©sek √©s analitikus deriv√°ltak ====
def logistic_map(r, x):      # x_{n+1} = r x (1-x), r‚àà[0,4]
    return r * x * (1 - x)
def d_logistic_map(r, x):    # f'(x) = r (1 - 2x)
    return r * (1 - 2*x)

def quadratic_map(r, x):     # x_{n+1} = r - x^2  (klasszikus kvadratikus csal√°d)
    return r - x**2
def d_quadratic_map(r, x):   # f'(x) = -2x
    return -2*x

# FIGYELEM: a "Henon" 1D v√°ltozat nem a val√≥di 2D H√©non-t√©rk√©p!
# Ha maradjon, nevezz√ºk ink√°bb "egyszer≈± kvadratikus" verzi√≥nak.
def pseudo_henon_map(r, x):  # x_{n+1} = 1 - r x^2 (csak demonstr√°ci√≥)
    return 1 - r * x**2
def d_pseudo_henon_map(r, x):
    return -2*r*x

map_functions = {
    "Logisztikus t√©rk√©p": (logistic_map, d_logistic_map),
    "Kvadratikus t√©rk√©p": (quadratic_map, d_quadratic_map),
    "Pseudo-H√©non (1D)": (pseudo_henon_map, d_pseudo_henon_map),  # jel√∂lj√ºk egy√©rtelm≈±en
}

# ==== Lyapunov sz√°m√≠t√°s analitikus deriv√°lttal + burn-in ====
def lyapunov_spectrum_1d(map_f, dmap_f, r_vals, x0=0.5, steps=1500, burn_in=500):
    """
    Œª(r) = lim (1/N) Œ£ ln | f'(x_n; r) |  a burn-in ut√°ni l√©p√©sekre.
    Minden r-hez k√ºl√∂n trajekt√≥ria fut (vektoros√≠tva).
    """
    r_vals = np.asarray(r_vals)
    x = np.full_like(r_vals, fill_value=x0, dtype=np.float64)

    # Burn-in: csak evolv√°lunk, nem √°tlagolunk
    for _ in range(burn_in):
        x = map_f(r_vals, x)

    # Fokozatos √°tlaghoz tartoz√≥ g√∂rbe felv√©tel√©hez elt√°roljuk a r√©sz√°tlagot is
    lyap_sum = np.zeros_like(r_vals, dtype=np.float64)
    lyap_history = []  # (iter, r) m√°trix a 3D fel√ºlethez

    # F≈ë ciklus: √°tlag a burn-in ut√°ni l√©p√©sekre
    for n in range(1, steps + 1):
        # analitikus deriv√°lt ‚Äì numerikus stabilit√°s: elker√ºlj√ºk a log(0)-t
        deriv = np.abs(dmap_f(r_vals, x))
        deriv = np.clip(deriv, 1e-300, None)  # sose legyen 0
        lyap_sum += np.log(deriv)
        lyap_history.append(lyap_sum / n)
        x = map_f(r_vals, x)

    lyap_vals = lyap_sum / steps
    lyap_history = np.vstack(lyap_history)    # shape: (steps, len(r_vals))
    return lyap_vals, lyap_history

# ==== Opcion√°lis: v√©ges differenci√°s k√∂zel√≠t√©s olyan f-ekhez, ahol nincs d f ====
def lyapunov_finite_diff(map_f, r_vals, x0=0.5, steps=1500, burn_in=500, delta=1e-8):
    r_vals = np.asarray(r_vals)
    x = np.full_like(r_vals, fill_value=x0, dtype=np.float64)

    for _ in range(burn_in):
        x = map_f(r_vals, x)

    lyap_sum = np.zeros_like(r_vals, dtype=np.float64)
    lyap_history = []

    for n in range(1, steps + 1):
        x1 = map_f(r_vals, x)
        x2 = map_f(r_vals, x + delta)
        d = np.abs(x2 - x1) / delta
        d = np.clip(d, 1e-300, None)
        lyap_sum += np.log(d)
        lyap_history.append(lyap_sum / n)
        x = x1

    return lyap_sum / steps, np.vstack(lyap_history)

# ==== Streamlit App ====
def run():
    st.title("üß† Lyapunov Spektrum ‚Äì Dinamikus rendszerek stabilit√°sa")

    st.markdown("""
A Lyapunov-exponens a **kezdeti felt√©telekre val√≥ √©rz√©kenys√©get** m√©ri diszkr√©t lek√©pez√©sekn√©l:  
\\[
\\lambda = \\lim_{n\\to\\infty} \\frac{1}{n} \\sum_{i=1}^{n} \\ln\\left|f'(x_i)\\right|.
\\]
Pozit√≠v \\(\\lambda\\) ‚Üí **k√°osz**, negat√≠v ‚Üí **stabil** (attraktorba h√∫z).
""")

    # Param√©terek
    map_choice = st.selectbox("üß© Lek√©pez√©s t√≠pusa", list(map_functions.keys()))
    r_min, r_max = st.slider("r tartom√°ny", 0.0, 4.0, (2.5, 4.0))
    n_points = st.slider("üìä Mintapontok sz√°ma (r)", 100, 2000, 600, step=100)
    x0 = st.slider("‚öôÔ∏è Kezdeti √©rt√©k (x‚ÇÄ)", 0.0, 1.0, 0.5)
    burn_in = st.slider("üî• Burn-in l√©p√©sek", 0, 5000, 500, step=100)
    steps = st.slider("üîÅ √Åtlagolt l√©p√©sek sz√°ma", 100, 5000, 1000, step=100)

    use_finite_diff = st.checkbox("Nincs analitikus deriv√°lt ‚Äì haszn√°lj v√©ges differenci√°t", value=False)

    # Spektrum sz√°m√≠t√°sa
    r_values = np.linspace(r_min, r_max, n_points)
    map_f, dmap_f = map_functions[map_choice]

    if use_finite_diff:
        lyap_vals, lyap_hist = lyapunov_finite_diff(
            map_f, r_values, x0=x0, steps=steps, burn_in=burn_in
        )
    else:
        lyap_vals, lyap_hist = lyapunov_spectrum_1d(
            map_f, dmap_f, r_values, x0=x0, steps=steps, burn_in=burn_in
        )

    # === 2D plot ===
    st.subheader("üìà 2D Lyapunov-spektrum")
    fig2d, ax = plt.subplots()
    ax.scatter(r_values, lyap_vals, c=np.where(lyap_vals < 0, 'green', 'red'), s=6, alpha=0.9)
    ax.axhline(0, color='gray', linestyle='--', linewidth=1)
    ax.set_xlabel("r")
    ax.set_ylabel("Œª (Lyapunov-exponens)")
    ax.set_title(f"Lyapunov-spektrum ‚Äì {map_choice}")
    st.pyplot(fig2d)

    # === 3D plot: a r√©sz√°tlag konvergenci√°ja ===
    st.subheader("üåê 3D ‚Äì Konvergencia az iter√°ci√≥k ment√©n")
    R, Ngrid = np.meshgrid(r_values, np.arange(1, steps+1))
    fig3d = go.Figure(data=[go.Surface(
        x=R, y=Ngrid, z=lyap_hist, colorscale="Viridis"
    )])
    fig3d.update_layout(
        title="R√©sz√°tlagolt Œª(r, n) fel√ºlet",
        scene=dict(xaxis_title='r', yaxis_title='n (iter√°ci√≥)', zaxis_title='Œª r√©sz√°tlag'),
        margin=dict(l=0, r=0, t=60, b=0),
        height=520
    )
    st.plotly_chart(fig3d, use_container_width=True)

    # === CSV export ===
    st.subheader("‚¨áÔ∏è Adatok let√∂lt√©se")
    df = pd.DataFrame({"r": r_values, "lambda": lyap_vals})
    csv = df.to_csv(index=False).encode("utf-8")
    st.download_button("Let√∂lt√©s CSV form√°tumban", data=csv, file_name="lyapunov_spectrum.csv")

    # === R√∂vid diagn√≥zis ===
    frac_chaotic = np.mean(lyap_vals > 0)
    st.info(f"üîç A mintav√©telezett r-tartom√°ny {frac_chaotic*100:.1f}%-√°ban Œª>0 (k√°osz).")

    # === Tudom√°nyos h√°tt√©r (LaTeX) ===
    st.markdown("### üìö Tudom√°nyos h√°tt√©r")
    st.markdown(r"""
A **Lyapunov-exponens** diszkr√©t lek√©pez√©sre:
\[
\lambda = \lim_{n\to\infty}\frac{1}{n}\sum_{i=1}^{n} \ln\left| f'(x_i) \right|,
\quad x_{i+1}=f(x_i).
\]
- **Logisztikus t√©rk√©p:** \(x_{n+1}=r x_n (1-x_n)\), \(f'(x)=r(1-2x)\)  
- **Kvadratikus t√©rk√©p:** \(x_{n+1}=r-x_n^2\), \(f'(x)=-2x\)

A burn-in elt√°vol√≠tja a kezdeti transzienseket; a r√©sz√°tlag \(\lambda_n\) konvergenci√°ja
l√°that√≥ a 3D fel√ºleten.
""")

# K√∂telez≈ë ReflectAI-kompatibilit√°s
app = run

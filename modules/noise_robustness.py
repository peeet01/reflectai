import numpy as np
import matplotlib.pyplot as plt
import streamlit as st

@st.cache_data(show_spinner=False)
def kuramoto_sim_fast(N, K, T, noise_level, dt=0.05):
    omega = np.random.normal(0, 1, N)
    theta = np.random.uniform(0, 2*np.pi, N)
    r_vals = np.zeros(T)

    for t in range(T):
        sin_diff = np.sin(theta[:, None] - theta)
        coupling = np.sum(sin_diff, axis=1)
        theta += (omega + (K / N) * coupling) * dt
        theta += noise_level * np.random.normal(0, 1, N) * dt
        r_vals[t] = np.abs(np.sum(np.exp(1j * theta)) / N)

    return r_vals

def run():
    st.subheader("üîâ Zajt≈±r√©s √©s Szinkroniz√°ci√≥ Vizualiz√°ci√≥ (Gyors√≠tott Pro v√°ltozat)")

    N = st.slider("Oszcill√°torok sz√°ma", 10, 100, 50)
    K = st.slider("Kapcsol√°si er≈ëss√©g (K)", 0.0, 10.0, 2.0)
    T = st.slider("Szimul√°ci√≥ hossza (l√©p√©sek)", 100, 1000, 300)

    noise_levels = [0.0, 0.2, 0.5]
    colors = ['green', 'orange', 'red']
    labels = ['Zajmentes', 'K√∂zepes zaj', 'Er≈ës zaj']

    fig, ax = plt.subplots()
    for noise, color, label in zip(noise_levels, colors, labels):
        r_vals = kuramoto_sim_fast(N, K, T, noise)
        ax.plot(r_vals, color=color, label=f"{label} (zaj = {noise})", linewidth=2)

    ax.set_title("üìâ Szinkroniz√°ci√≥s index ‚Äì Zajhat√°s vizsg√°lata")
    ax.set_xlabel("Id≈ël√©p√©s")
    ax.set_ylabel("r (szinkroniz√°ci√≥s index)")
    ax.legend()
    ax.grid(True)

    st.pyplot(fig)

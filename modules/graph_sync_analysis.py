import streamlit as st
import networkx as nx
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import time
import pandas as pd

def kuramoto_step(theta, omega, A, K, dt):
    N = len(theta)
    dtheta = omega + (K / N) * np.sum(A * np.sin(np.subtract.outer(theta, theta)), axis=1)
    return theta + dtheta * dt

def run_simulation(G, steps, dt, K):
    N = len(G)
    theta = np.random.rand(N) * 2 * np.pi
    omega = np.random.randn(N)
    A = nx.to_numpy_array(G)

    r_values = []
    theta_history = []

    for _ in range(steps):
        theta = kuramoto_step(theta, omega, A, K, dt)
        r = np.abs(np.mean(np.exp(1j * theta)))
        r_values.append(r)
        theta_history.append(theta.copy())
    return r_values, theta_history

def draw_graph(G, theta=None, title="Gr√°f vizualiz√°ci√≥"):
    pos = nx.spring_layout(G, seed=42)
    if theta is not None:
        norm_theta = (theta % (2 * np.pi)) / (2 * np.pi)
        node_colors = cm.hsv(norm_theta)
    else:
        node_colors = 'lightblue'

    fig, ax = plt.subplots()
    nx.draw(G, pos, node_color=node_colors, edge_color='gray', with_labels=True, ax=ax)
    ax.set_title(title)
    st.pyplot(fig)

def run():
    st.title("üîó Gr√°falap√∫ szinkronanal√≠zis ‚Äì Kuramoto-modell")
    st.markdown("Vizsg√°ld meg, hogyan alakul a szinkroniz√°ci√≥ k√ºl√∂nb√∂z≈ë gr√°fstrukt√∫r√°kon.")

    with st.sidebar:
        st.header("‚öôÔ∏è Param√©terek")
        graph_type = st.selectbox("Gr√°ft√≠pus", ["Erd≈ës‚ÄìR√©nyi", "K√∂r", "R√°cs", "Teljes gr√°f"])
        N = st.slider("Csom√≥pontok sz√°ma", 5, 100, 30)
        K = st.slider("Kapcsol√°si er≈ëss√©g (K)", 0.0, 10.0, 2.0)
        steps = st.slider("L√©p√©sek sz√°ma", 10, 1000, 300)
        dt = st.slider("Id≈ël√©p√©s (dt)", 0.001, 0.1, 0.01)
        er_p = st.slider("Erd≈ës‚ÄìR√©nyi √©lval√≥sz√≠n≈±s√©g", 0.05, 1.0, 0.1, step=0.05)

    if st.button("‚ñ∂Ô∏è Szimul√°ci√≥ ind√≠t√°sa"):
        if graph_type == "Erd≈ës‚ÄìR√©nyi":
            G = nx.erdos_renyi_graph(N, er_p)
        elif graph_type == "K√∂r":
            G = nx.cycle_graph(N)
        elif graph_type == "R√°cs":
            side = int(np.sqrt(N))
            G = nx.grid_2d_graph(side, side)
            G = nx.convert_node_labels_to_integers(G)
        elif graph_type == "Teljes gr√°f":
            G = nx.complete_graph(N)

        with st.spinner("Szimul√°ci√≥ fut..."):
            start = time.time()
            r_values, theta_hist = run_simulation(G, steps, dt, K)
            end = time.time()

        st.success(f"‚úÖ Szimul√°ci√≥ k√©sz ({end - start:.2f} sec)")
        st.metric("üìà V√©gs≈ë szinkroniz√°ci√≥ (r)", f"{r_values[-1]:.3f}")
        st.metric("üìä √Åtlagos szinkroniz√°ci√≥ (r)", f"{np.mean(r_values):.3f}")

        # r(t) grafikon
        st.subheader("üìâ Szinkroniz√°ci√≥ id≈ëbeli alakul√°sa")
        fig1, ax1 = plt.subplots()
        ax1.plot(r_values)
        ax1.set_xlabel("Id≈ël√©p√©s")
        ax1.set_ylabel("Szinkroniz√°ci√≥ (r)")
        ax1.set_title("Kuramoto ‚Äì r(t)")
        st.pyplot(fig1)

        # Kezdet √©s v√©g vizualiz√°ci√≥
        st.subheader("üß† Kezdeti gr√°f vizualiz√°ci√≥")
        draw_graph(G, theta_hist[0], "Kezdeti f√°zisok")

        st.subheader("üß† V√©g√°llapot gr√°f vizualiz√°ci√≥")
        draw_graph(G, theta_hist[-1], "V√©gs≈ë f√°zisok")

        # Anim√°lt l√©ptet√©s
        if st.checkbox("üéûÔ∏è Gr√°f anim√°ci√≥ megtekint√©se", value=False):
            st.subheader("üé¨ Szinkroniz√°ci√≥ alakul√°sa l√©p√©senk√©nt")
            step_to_show = st.slider("Anim√°ci√≥ l√©p√©se", 0, steps - 1, 0)
            draw_graph(G, theta_hist[step_to_show], f"{step_to_show}. l√©p√©s")

        # CSV let√∂lt√©s
        df = pd.DataFrame({
            "step": list(range(len(r_values))),
            "r_value": r_values
        })
        csv = df.to_csv(index=False).encode("utf-8")
        st.download_button("üì• r(t) export√°l√°sa CSV-k√©nt", csv, file_name="kuramoto_r_values.csv")

        # Jegyzet
        st.subheader("üìù Jegyzetek")
        notes = st.text_area("√çrd le megfigyel√©seid:", height=150)
        if notes:
            st.download_button("üíæ Jegyzet ment√©se", notes, file_name="kuramoto_notes.txt")

    with st.expander("üìö Elm√©leti h√°tt√©r"):
        st.markdown(r"""
        A **Kuramoto-modell** egy nemline√°ris differenci√°legyenlet-rendszer, amelyet oszcill√°torok szinkroniz√°ci√≥j√°nak modellez√©s√©re haszn√°lnak.

        Az egyes csom√≥pontok saj√°t frekvenci√°val rendelkeznek (`œâ`), √©s a kapcsolatok (gr√°f √©lei) ment√©n szinkroniz√°lnak a t√∂bbiekkel.  
        A rendszer szinkroniz√°ci√≥j√°t az `r` √©rt√©k m√©ri:  
        - `r = 1` ‚Üí teljes szinkroniz√°ci√≥  
        - `r ~ 0` ‚Üí kaotikus √°llapot

        #### Alkalmaz√°si ter√ºletek:
        - Neur√°lis oszcill√°ci√≥k
        - Elektromos h√°l√≥zatok
        - Biol√≥giai ritmusok (pl. sz√≠vsejtek)

        üìñ *Kuramoto, Y. (1975). "Self-entrainment of a population of coupled non-linear oscillators"*
        """)

# K√∂telez≈ë ReflectAI kompatibilit√°shoz
app = run

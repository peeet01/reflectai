import streamlit as st
import numpy as np
import pandas as pd
import plotly.graph_objects as go
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
from sklearn.preprocessing import StandardScaler

def generate_data(N, timesteps, eta, init_std=0.1):
    x = np.random.randn(N, timesteps)
    W = np.random.randn(N, N) * init_std
    history = []

    for t in range(1, timesteps):
        y = np.tanh(W @ x[:, t-1])
        W += eta * np.outer(y, x[:, t-1])
        history.append(W.copy())

    return np.array(history), x

def visualize_weights_3d(data, method, step):
    flattened = data[step].reshape(-1, 1)

    if method == "PCA":
        model = PCA(n_components=3)
    elif method == "t-SNE":
        model = TSNE(n_components=3, perplexity=10, learning_rate='auto', init='pca')
    else:  # Raw Grid
        size = int(np.sqrt(flattened.shape[0]))
        coords = np.indices((size, size)).reshape(2, -1).T
        x, y = coords[:, 0], coords[:, 1]
        z = flattened.flatten()
        fig = go.Figure(data=[go.Scatter3d(
            x=x, y=y, z=z,
            mode='markers',
            marker=dict(size=4, color=z, colorscale='Viridis', opacity=0.8)
        )])
        return fig

    coords = model.fit_transform(StandardScaler().fit_transform(flattened))
    x, y, z = coords[:, 0], coords[:, 1], coords[:, 2]

    fig = go.Figure(data=[go.Scatter3d(
        x=x, y=y, z=z,
        mode='markers',
        marker=dict(size=5, color=z, colorscale='Plasma', opacity=0.8)
    )])
    return fig

def run():
    st.title("üåã Critical Hebbian ‚Äì Szinaptikus tanul√°s √©s komplexit√°s")

    st.markdown("""
    ### üß† Tudom√°nyos c√©lkit≈±z√©s
    Ez a modul a **Hebbian tanul√°s** dinamik√°j√°t √©s annak **kritikus viselked√©shez** val√≥ viszony√°t mutatja be.  
    A Hebbian-szab√°ly √∂nmag√°ban pozit√≠v visszacsatol√°s√∫, √©s bizonyos felt√©telek mellett **kritikus f√°zishat√°r** k√∂zel√©be tolhatja a h√°l√≥zatot.

    ### ‚öôÔ∏è Matematikai h√°tt√©r

    Hebbian tanul√°s:

    $$
    \Delta w_{ij} = \eta \cdot y_i \cdot x_j
    $$

    Ahol:
    - $x_j$: bemeneti neuron aktivit√°sa
    - $y_i$: kimeneti neuron aktivit√°sa (pl. $\\tanh(Wx)$)
    - $w_{ij}$: szinaptikus s√∫ly
    - $\\eta$: tanul√°si r√°ta

    Id≈ëben v√°ltoz√≥ s√∫lym√°trix:  
    $$
    W(t+1) = W(t) + \eta \cdot y(t) \cdot x(t)^T
    $$

    ### üéØ C√©l
    - Szeml√©ltetni a Hebbian tanul√°s hat√°s√°t a s√∫lyt√©r szerkezet√©re
    - Felt√°rni a tanul√°si dinamika esetleges **kritikus pontk√∂zeli** viselked√©s√©t
    - 3D-s vizualiz√°ci√≥val √©rtelmezni a s√∫lyt√©r alakul√°s√°t k√ºl√∂nb√∂z≈ë n√©z≈ëpontokb√≥l

    ---
    """)

    st.sidebar.header("üîß Param√©terek")
    N = st.sidebar.slider("Neuronok sz√°ma", 5, 100, 20, step=5)
    timesteps = st.sidebar.slider("Id≈ël√©p√©sek sz√°ma", 50, 500, 100, step=50)
    eta = st.sidebar.slider("Tanul√°si r√°ta (Œ∑)", 0.001, 0.1, 0.01)
    viz_type = st.sidebar.selectbox("Vizualiz√°ci√≥ t√≠pusa", ["Raw Grid", "PCA", "t-SNE"])
    step = st.sidebar.slider("L√©p√©s megjelen√≠t√©se", 0, timesteps - 2, timesteps // 2)

    if st.sidebar.button("üîÅ Szimul√°ci√≥ √∫jraind√≠t√°sa"):
        st.session_state['data'], st.session_state['activity'] = generate_data(N, timesteps, eta)

    if 'data' not in st.session_state:
        st.session_state['data'], st.session_state['activity'] = generate_data(N, timesteps, eta)

    st.subheader("üé• S√∫lym√°trix vizualiz√°ci√≥ 3D-ben")
    fig = visualize_weights_3d(st.session_state['data'], viz_type, step)
    st.plotly_chart(fig, use_container_width=True)

    # Export
    st.subheader("üíæ S√∫lym√°trix ment√©se CSV-be")
    W_df = pd.DataFrame(st.session_state['data'][step])
    st.dataframe(W_df)
    csv = W_df.to_csv(index=False).encode('utf-8')
    st.download_button("üì• Let√∂lt√©s CSV form√°tumban", csv, "hebbian_weights.csv", "text/csv")

    with st.expander("üìö Tudom√°nyos magyar√°zat √©s k√∂vetkeztet√©sek"):
        st.markdown(r"""
        A Hebbian szab√°ly el≈ënye, hogy egyszer≈± √©s biol√≥giailag motiv√°lt, azonban **√∂nmag√°ban instabil** lehet.  
        K√©pes **kritikus viselked√©s** k√∂zel√©be tolni a h√°l√≥zatot, ami maxim√°lis komplexit√°st √©s inform√°ci√≥feldolgoz√°si k√©pess√©get biztos√≠t.

        ### üîç Megfigyelhet≈ë jelens√©gek:
        - A s√∫lyt√©r szerkezete **nemline√°risan v√°ltozik** az id≈ë sor√°n
        - A PCA/t-SNE vizualiz√°ci√≥k r√©v√©n **rejtett mint√°k** √©s **topol√≥giai szervez≈ëd√©sek** figyelhet≈ëk meg
        - A tanul√°si r√°ta befoly√°solja, hogy a h√°l√≥zat **konverg√°l-e**, **diverg√°l-e**, vagy **√∂nszervez≈ëd≈ë mint√°zatokat** mutat

        ### üí° Tudom√°nyos jelent≈ës√©g:
        A Hebbian tanul√°s egyszer≈± szab√°lya m√∂g√∂tt egy rendk√≠v√ºl gazdag dinamika rejlik, amely kapcsolatban √°ll a **kritikuss√°g**, **emergencia** √©s **√∂nszervez≈ëd√©s** fogalmaival.  
        A megfelel≈ë tanul√°si param√©terek mellett a h√°l√≥zat a legnagyobb **adaptivit√°si** √©s **plaszticit√°si** potenci√°lt mutatja.
        """)

# K√∂telez≈ë bel√©p√©si pont
app = run

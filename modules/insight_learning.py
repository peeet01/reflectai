import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import time
import os
from datetime import datetime

def generate_environment(grid_size, agent_pos, goal_pos, obstacle_pos):
    env = np.zeros((grid_size, grid_size))
    env[tuple(goal_pos)] = 2
    env[tuple(obstacle_pos)] = -1
    env[tuple(agent_pos)] = 1
    return env

def simulate_learning(grid_size, agent_pos, goal_pos, obstacle_pos, episodes, max_steps, use_insight):
    steps = []
    found = False
    steps_to_goal = []

    for episode in range(episodes):
        pos = agent_pos.copy()
        path = [tuple(pos)]
        for _ in range(max_steps):
            if pos == goal_pos:
                found = True
                break
            if use_insight and pos[1] < obstacle_pos[1] and pos[0] == obstacle_pos[0]:
                pos[0] -= 1  # Insight: ugr√°s az akad√°ly f√∂l√©
            else:
                if pos[1] < grid_size - 1:
                    pos[1] += 1
                elif pos[0] > 0:
                    pos[0] -= 1
            path.append(tuple(pos))
        steps.append(path)
        steps_to_goal.append(len(path))
    return steps, found, steps_to_goal

def plot_environment(grid_size, steps, goal_pos, obstacle_pos):
    fig, ax = plt.subplots(figsize=(5, 5))
    ax.set_xlim(-0.5, grid_size - 0.5)
    ax.set_ylim(-0.5, grid_size - 0.5)
    ax.invert_yaxis()
    ax.grid(True)

    for x in range(grid_size):
        for y in range(grid_size):
            if [x, y] == goal_pos:
                ax.text(y, x, 'üèÅ', ha='center', va='center')
            elif [x, y] == obstacle_pos:
                ax.text(y, x, 'üß±', ha='center', va='center')

    for path in steps[-5:]:
        xs, ys = zip(*path)
        ax.plot(ys, xs, alpha=0.6)
    return fig

def run():
    st.title("üß† Bel√°t√°s alap√∫ tanul√°s ‚Äì Insight Learning szimul√°ci√≥")

    st.markdown("""
    Ez a modul egy egyszer≈± k√∂rnyezetben modellezi a **bel√°t√°s alap√∫ tanul√°st**, ahol az √ºgyn√∂k egy ponton _hirtelen_ meg√©rti, hogyan √©rheti el a c√©lt.
    """)

    # Param√©terek
    grid_size = st.slider("üî≤ R√°cs m√©ret", 5, 15, 7)
    episodes = st.slider("üîÅ Epiz√≥dok sz√°ma", 10, 200, 50, step=10)
    max_steps = st.slider("üö∂‚Äç‚ôÇÔ∏è L√©p√©sek epiz√≥donk√©nt", 5, 50, 20)
    use_insight = st.checkbox("üí° Bel√°t√°s aktiv√°l√°sa", value=True)

    # √Ålland√≥ poz√≠ci√≥k
    agent_pos = [grid_size - 1, 0]
    goal_pos = [0, grid_size - 1]
    obstacle_pos = [grid_size // 2, grid_size // 2]

    # Szimul√°ci√≥
    steps, found, steps_to_goal = simulate_learning(
        grid_size, agent_pos, goal_pos, obstacle_pos, episodes, max_steps, use_insight
    )

    # K√∂rnyezet kirajzol√°sa
    st.markdown("### üåç K√∂rnyezet vizualiz√°ci√≥")
    fig_env = plot_environment(grid_size, steps, goal_pos, obstacle_pos)
    st.pyplot(fig_env)

    # Tanul√°si g√∂rbe
    st.markdown("### üìâ L√©p√©sek sz√°ma epiz√≥donk√©nt")
    fig_steps, ax_steps = plt.subplots()
    ax_steps.plot(steps_to_goal, marker='o')
    ax_steps.set_xlabel("Epiz√≥d")
    ax_steps.set_ylabel("L√©p√©sek sz√°ma")
    ax_steps.set_title("Tanul√°si g√∂rbe")
    st.pyplot(fig_steps)

    if found:
        st.success("üéâ Az √ºgyn√∂k el√©rte a c√©lt ‚Äì bel√°t√°s vagy strat√©gia r√©v√©n!")
    else:
        st.warning("ü§î Az √ºgyn√∂k m√©g nem tal√°lta meg a c√©lt.")

    # Riport let√∂lt√©s
    with st.expander("üìù Riport gener√°l√°sa √©s let√∂lt√©s"):
        if st.button("üì• Riport let√∂lt√©se (.txt)"):
            report_text = f"""Bel√°t√°s alap√∫ tanul√°si riport
------------------------------
D√°tum: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
R√°cs m√©ret: {grid_size}x{grid_size}
Epiz√≥dok: {episodes}
L√©p√©sek epiz√≥donk√©nt: {max_steps}
Bel√°t√°s aktiv√°lva: {use_insight}
C√©l el√©rve: {"Igen" if found else "Nem"}
√Åtlagos l√©p√©ssz√°m: {np.mean(steps_to_goal):.2f}
"""
            filename = "insight_learning_report.txt"
            with open(filename, "w") as f:
                f.write(report_text)
            with open(filename, "rb") as f:
                st.download_button("‚¨áÔ∏è Let√∂lt√©s", f, file_name=filename)
            os.remove(filename)

    with st.expander("üìò Tudom√°nyos h√°tt√©r ‚Äì Mi az a bel√°t√°s?"):
        st.markdown("""
        A **bel√°t√°sos tanul√°s** (insight learning) olyan folyamat, amikor egy √©l≈ël√©ny ‚Äì gyakran v√°ratlanul ‚Äì _"meg√©rti"_ a probl√©ma megold√°s√°t.  
        Ez szemben √°ll a klasszikus **pr√≥ba-szerencse** tanul√°ssal, √©s gyakran jellemz≈ë az emberekre √©s magasabb rend≈± √°llatokra is.

        ### üêí K√∂hler k√≠s√©rlete:
        - A csimp√°nz egy bottal szerezte meg a t√°voli ban√°nt
        - Nem v√©letlenszer≈± pr√≥b√°lgat√°ssal, hanem egy _hirtelen felismer√©ssel_

        Ez a szimul√°ci√≥ ennek egyszer≈± absztrakci√≥ja, √©s lehet≈ëv√© teszi, hogy megfigyelj√ºk:
        - Hogyan v√°ltozik a tanul√°si teljes√≠tm√©ny
        - Miben m√°s a bel√°t√°s, mint a kondicion√°l√°s vagy meger≈ës√≠t√©ses tanul√°s
        """)

# K√∂telez≈ë ReflectAI-kompatibilit√°s
app = run

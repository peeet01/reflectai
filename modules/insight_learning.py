import streamlit as st 
import numpy as np 
import matplotlib.pyplot as plt 
import time import os from datetime import datetime 
import plotly.graph_objects as go from scipy.ndimage 
import gaussian_filter

def generate_environment(grid_size, agent_pos, goal_pos, obstacle_pos): env = np.zeros((grid_size, grid_size)) env[tuple(goal_pos)] = 2 env[tuple(obstacle_pos)] = -1 env[tuple(agent_pos)] = 1 return env

def simulate_learning(grid_size, agent_pos, goal_pos, obstacle_pos, episodes, max_steps, use_insight): steps = [] found = False steps_to_goal = [] activations = []

for episode in range(episodes):
    pos = agent_pos.copy()
    path = [tuple(pos)]
    activation_map = np.zeros((grid_size, grid_size))

    for _ in range(max_steps):
        activation_map[tuple(pos)] += 1
        if pos == goal_pos:
            found = True
            break
        if use_insight and pos[1] < obstacle_pos[1] and pos[0] == obstacle_pos[0]:
            pos[0] -= 1  # Insight: ugr√°s
        else:
            if pos[1] < grid_size - 1:
                pos[1] += 1
            elif pos[0] > 0:
                pos[0] -= 1
        path.append(tuple(pos))

    steps.append(path)
    steps_to_goal.append(len(path))
    activations.append(activation_map)

return steps, found, steps_to_goal, activations

def plot_environment(grid_size, steps, goal_pos, obstacle_pos): fig, ax = plt.subplots(figsize=(5, 5)) ax.set_xlim(-0.5, grid_size - 0.5) ax.set_ylim(-0.5, grid_size - 0.5) ax.invert_yaxis() ax.grid(True)

for x in range(grid_size):
    for y in range(grid_size):
        if [x, y] == goal_pos:
            ax.text(y, x, 'üèãÔ∏è', ha='center', va='center')
        elif [x, y] == obstacle_pos:
            ax.text(y, x, 'üß°', ha='center', va='center')

for path in steps[-5:]:
    xs, ys = zip(*path)
    ax.plot(ys, xs, alpha=0.6)
return fig

def plot_brain_activity_2d(activation_map): fig, ax = plt.subplots(figsize=(5, 5)) im = ax.imshow(activation_map, cmap="plasma", interpolation='nearest') ax.set_title("üß† Aktiv√°ci√≥s t√©rk√©p (neur√°lis mint√°zat)") ax.set_xlabel("Neuron X") ax.set_ylabel("Neuron Y") fig.colorbar(im, ax=ax, label="Aktiv√°ci√≥ gyakoris√°g") return fig

def plot_brain_activity_3d(activation_map): z = gaussian_filter(activation_map, sigma=1.2) x, y = np.meshgrid(np.arange(z.shape[1]), np.arange(z.shape[0])) z += 0.2 * np.sin(x / 2.5) * np.cos(y / 3)  # hull√°mforma torz√≠t√°s

fig = go.Figure(data=[
    go.Surface(
        z=z,
        x=x,
        y=y,
        colorscale='Electric',
        opacity=0.95,
        lighting=dict(ambient=0.5, diffuse=0.9, specular=1.0, roughness=0.2),
        lightposition=dict(x=30, y=50, z=100),
        contours=dict(
            z=dict(show=True, usecolormap=True, highlightcolor="limegreen", project_z=True)
        )
    )
])

fig.update_layout(
    title="üß† 3D agyi aktiv√°ci√≥ ‚Äì domborzati modell",
    scene=dict(
        xaxis_title="Neuron X",
        yaxis_title="Neuron Y",
        zaxis_title="Aktiv√°ci√≥",
        xaxis=dict(showspikes=False),
        yaxis=dict(showspikes=False),
        zaxis=dict(nticks=6, range=[0, np.max(z) + 1])
    ),
    margin=dict(l=0, r=0, t=60, b=0),
    template="plotly_dark"
)
return fig

def run(): st.title("üß† Bel√°t√°s alap√∫ tanul√°s ‚Äì Insight Learning szimul√°ci√≥")

st.markdown("""
Ez a modul egy egyszer≈± k√∂rnyezetben modellezi a **bel√°t√°s alap√∫ tanul√°st**, ahol az √ºgyn√∂k egy ponton _hirtelen_ meg√©rti, hogyan √©rheti el a c√©lt.
""")

grid_size = st.slider("üî≤ R√°cs m√©ret", 5, 15, 7)
episodes = st.slider("ü§Å Epiz√≥dok sz√°ma", 10, 200, 50, step=10)
max_steps = st.slider("üõéÔ∏è L√©p√©sek epiz√≥donk√©nt", 5, 50, 20)
use_insight = st.checkbox("üí° Bel√°t√°s aktiv√°l√°sa", value=True)

agent_pos = [grid_size - 1, 0]
goal_pos = [0, grid_size - 1]
obstacle_pos = [grid_size // 2, grid_size // 2]

steps, found, steps_to_goal, activations = simulate_learning(
    grid_size, agent_pos, goal_pos, obstacle_pos, episodes, max_steps, use_insight
)

st.markdown("### üåç K√∂rnyezet vizualiz√°ci√≥")
fig_env = plot_environment(grid_size, steps, goal_pos, obstacle_pos)
st.pyplot(fig_env)

st.markdown("### üìâ L√©p√©sek sz√°ma epiz√≥donk√©nt")
fig_steps, ax_steps = plt.subplots()
ax_steps.plot(steps_to_goal, marker='o')
ax_steps.set_xlabel("Epiz√≥d")
ax_steps.set_ylabel("L√©p√©ssz√°m")
ax_steps.set_title("Tanul√°si g√∂rbe")
st.pyplot(fig_steps)

st.markdown("### üß† Aktiv√°ci√≥s agymodell")
selected_ep = st.slider("üß™ Megfigyelni k√≠v√°nt epiz√≥d", 0, episodes - 1, episodes - 1)

tabs = st.tabs(["2D T√©rk√©p", "3D Modell"])
with tabs[0]:
    fig_brain_2d = plot_brain_activity_2d(activations[selected_ep])
    st.pyplot(fig_brain_2d)
with tabs[1]:
    fig_brain_3d = plot_brain_activity_3d(activations[selected_ep])
    st.plotly_chart(fig_brain_3d, use_container_width=True)

if found:
    st.success("üéâ Az √ºgyn√∂k el√©rte a c√©lt ‚Äì bel√°t√°s vagy strat√©gia r√©v√©n!")
else:
    st.warning("ü§î Az √ºgyn√∂k m√©g nem tal√°lta meg a c√©lt.")

with st.expander("üìú Riport gener√°l√°sa √©s let√∂lt√©s"):
    if st.button("üìÖ Riport let√∂lt√©se (.txt)"):
        report_text = f"""Bel√°t√°s alap√∫ tanul√°si riport


---

D√°tum: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} R√°cs m√©ret: {grid_size}x{grid_size} Epiz√≥dok: {episodes} L√©p√©sek epiz√≥donk√©nt: {max_steps} Bel√°t√°s aktiv√°lva: {use_insight} C√©l el√©rve: {"Igen" if found else "Nem"} √Åtlagos l√©p√©ssz√°m: {np.mean(steps_to_goal):.2f} """ filename = "insight_learning_report.txt" with open(filename, "w") as f: f.write(report_text) with open(filename, "rb") as f: st.download_button("‚¨áÔ∏è Let√∂lt√©s", f, file_name=filename) os.remove(filename)

with st.expander("üìò Tudom√°nyos h√°tt√©r ‚Äì Mi az a bel√°t√°s?"):
    st.markdown("""
    A **bel√°t√°sos tanul√°s** (insight learning) egy kognit√≠v folyamat, ahol a probl√©ma megold√°sa nem v√©letlenszer≈± pr√≥b√°lkoz√°ssal,  
    hanem egy _struktur√°lis √°tl√°t√°s_ r√©v√©n t√∂rt√©nik.

    ### üêí K√∂hler-f√©le csimp√°nz k√≠s√©rlet:
    - Egy ban√°n el√©rhetetlen, de eszk√∂z seg√≠ts√©g√©vel m√©gis megszerezhet≈ë.
    - A megold√°s **nem fokozatos**, hanem **hirtelen jelentkezik**.

    A szimul√°lt aktiv√°ci√≥s t√©rk√©p azt reprezent√°lja, hogy az ‚Äûagy‚Äù mely r√©gi√≥i (poz√≠ci√≥i) milyen gyakran voltak akt√≠vak a sikeres vagy sikertelen keres√©s sor√°n.
    """)

ReflectAI-kompatibilit√°s

app = run


import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import plotly.graph_objects as go
from scipy.ndimage import gaussian_filter

st.set_page_config(layout="wide")

def run():
    st.title("üß† Insight Learning ‚Äì Bel√°t√°s alap√∫ tanul√°s szimul√°ci√≥")

    st.markdown("""
    A **bel√°t√°sos tanul√°s** sor√°n a megold√°s nem fokozatos pr√≥b√°lkoz√°sokkal,
    hanem egy **hirtelen felismer√©ssel** (aha-√©lm√©ny) jelenik meg.

    Ez a szimul√°ci√≥ egy **aktiv√°ci√≥s t√©rk√©pen** modellezi a tapasztalati tanul√°st,
    ahol az aktiv√°ci√≥ egy adott k√ºsz√∂b felett **bel√°t√°st** v√°lt ki.
    """)

    # Cs√∫szk√°k
    st.sidebar.header("üîß Param√©terek")
    grid_size = st.sidebar.slider("R√°cs m√©rete", 5, 50, 20)
    episodes = st.sidebar.slider("Epiz√≥dok sz√°ma", 1, 200, 50)
    activation_increment = st.sidebar.slider("Aktiv√°ci√≥ n√∂veked√©s (ŒîA)", 0.1, 5.0, 1.0)
    aha_threshold = st.sidebar.slider("Bel√°t√°si k√ºsz√∂b (Œ∏)", 1.0, 20.0, 10.0)
    sigma = st.sidebar.slider("Ment√°lis sim√≠t√°s (œÉ)", 0.0, 3.0, 1.0)

    def generate_activation_map(grid_size, episodes, increment, sigma):
        activation_map = np.zeros((grid_size, grid_size))
        for _ in range(episodes):
            x, y = np.random.randint(0, grid_size, 2)
            activation_map[x, y] += increment
        if sigma > 0:
            activation_map = gaussian_filter(activation_map, sigma=sigma)
        return activation_map

    activation_map = generate_activation_map(grid_size, episodes, activation_increment, sigma)

    center = grid_size // 2
    center_activation = activation_map[center, center]
    insight_occurred = center_activation >= aha_threshold

    # 2D t√©rk√©p
    st.header("üó∫Ô∏è Aktiv√°ci√≥s t√©rk√©p (2D)")
    fig2d, ax2d = plt.subplots()
    cax = ax2d.imshow(activation_map, cmap="plasma")
    fig2d.colorbar(cax, ax=ax2d, label="Aktiv√°ci√≥")
    ax2d.set_title("Aktiv√°ci√≥ eloszl√°s")
    st.pyplot(fig2d)

    # 3D felsz√≠n
    st.header("üåê Aktiv√°ci√≥s felsz√≠n (3D)")
    x, y = np.meshgrid(np.arange(grid_size), np.arange(grid_size))
    fig3d = go.Figure(data=[go.Surface(z=activation_map, x=x, y=y, colorscale="Inferno")])
    fig3d.update_layout(
        scene=dict(
            xaxis_title="Neuron X",
            yaxis_title="Neuron Y",
            zaxis_title="Aktiv√°ci√≥"
        ),
        margin=dict(l=0, r=0, t=50, b=0)
    )
    st.plotly_chart(fig3d, use_container_width=True)

    # Bel√°t√°s
    st.header("üìå Bel√°t√°s eredm√©nye")
    if insight_occurred:
        st.success(f"‚úÖ Bel√°t√°s megt√∂rt√©nt! A k√∂z√©ppont aktiv√°ci√≥ja: {center_activation:.2f} ‚â• {aha_threshold}")
    else:
        st.warning(f"‚ùå Nem t√∂rt√©nt bel√°t√°s. A k√∂z√©ppont aktiv√°ci√≥ja: {center_activation:.2f} < {aha_threshold}")

    # CSV export
    st.header("üíæ CSV export√°l√°s")
    csv = "\n".join([",".join(map(str, row)) for row in activation_map])
    st.download_button("‚¨áÔ∏è Aktiv√°ci√≥s t√©rk√©p let√∂lt√©se", csv.encode("utf-8"), file_name="activation_map.csv")

    st.markdown("### üìò Tudom√°nyos h√°tt√©r")

    st.markdown("**Lorenz-egyenletek**")
    st.latex(r"""
    \begin{aligned}
    \frac{dx}{dt} &= \sigma\,(y - x),\\
    \frac{dy}{dt} &= x\,(\rho - z) - y,\\
    \frac{dz}{dt} &= x\,y - \beta\,z.
    \end{aligned}
    """)

    st.markdown("A rendszer determinisztikus, de **kaotikus**, ez√©rt a hossz√∫ t√°v√∫ el≈ërejelz√©s er≈ësen √©rz√©keny a kezdeti felt√©telekre.")

    st.markdown("---")
    st.markdown("**MLP-alap√∫ el≈ërejelz√©s (cs√∫sz√≥ablak)**")
    st.latex(r"""
    \hat{x}_{t+1} = f\!\big(x_t,\, x_{t-1},\, \dots,\, x_{t-w+1}\big)
    """)
    st.markdown(r"ahol \(w\) az ablakm√©ret; a bemenetek a m√∫ltbeli mint√°k, a kimenet a k√∂vetkez≈ë \(x\) √©rt√©k.")

    st.markdown("**Teljes√≠tm√©nymutat√≥k**")
    st.markdown("- Determin√°ci√≥s egy√ºtthat√≥ \(R^2\)")
    st.latex(r"""
    R^2 = 1 - \frac{\sum_{i=1}^{n}(y_i - \hat{y}_i)^2}{\sum_{i=1}^{n}(y_i - \bar{y})^2}
    """)
    st.markdown("- √Åtlagos n√©gyzetes hiba (MSE)")
    st.latex(r"""
    \mathrm{MSE} = \frac{1}{n}\sum_{i=1}^{n}\big(y_i - \hat{y}_i\big)^2
    """)

app = run

import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import plotly.graph_objects as go
from scipy.ndimage import gaussian_filter

# --- Be√°ll√≠t√°sok ---
st.set_page_config(layout="wide")
st.title("üß† Insight Learning ‚Äì Bel√°t√°s alap√∫ tanul√°s modellez√©se")

st.markdown("""
Ez a modul a **bel√°t√°sos tanul√°s** folyamat√°t modellezi. Az insight learning sor√°n az √ºgyn√∂k
egyszer csak *r√°j√∂n*, hogyan oldjon meg egy probl√©m√°t, miut√°n el√©g inform√°ci√≥t halmozott fel.
""")

# --- Param√©terek ---
st.sidebar.header("üîß Param√©terek")
grid_size = st.sidebar.slider("R√°cs m√©rete", 5, 20, 10)
episodes = st.sidebar.slider("Epiz√≥dok sz√°ma", 10, 100, 50)
max_steps = st.sidebar.slider("Maxim√°lis l√©p√©sek epiz√≥donk√©nt", 10, 100, 30)
insight_threshold = st.sidebar.slider("Bel√°t√°si k√ºsz√∂b√©rt√©k (Œ∏)", 0.1, 5.0, 2.5, 0.1)

# --- Szimul√°ci√≥ ---
def simulate_insight_learning(grid_size, episodes, max_steps, threshold):
    activation_total = np.zeros((grid_size, grid_size))
    insight_happened = False
    insight_map = np.zeros_like(activation_total)

    for ep in range(episodes):
        pos = [grid_size - 1, 0]
        for _ in range(max_steps):
            activation_total[pos[0], pos[1]] += 0.1
            if pos[1] < grid_size - 1:
                pos[1] += 1
            else:
                pos[0] = max(0, pos[0] - 1)

    activation_smoothed = gaussian_filter(activation_total, sigma=1.0)
    if np.max(activation_smoothed) >= threshold:
        insight_happened = True
        insight_map = activation_smoothed >= threshold

    return activation_smoothed, insight_happened, insight_map

activation_map, insight_flag, insight_mask = simulate_insight_learning(
    grid_size, episodes, max_steps, insight_threshold
)

# --- 2D Megjelen√≠t√©s ---
st.subheader("üìà Aktiv√°ci√≥s t√©rk√©p ‚Äì 2D")
fig2d, ax2d = plt.subplots()
im = ax2d.imshow(activation_map, cmap="plasma")
plt.colorbar(im, ax=ax2d)
st.pyplot(fig2d)

# --- 3D Plotly Megjelen√≠t√©s ---
st.subheader("üåã Aktiv√°ci√≥s t√©rk√©p ‚Äì 3D Plotly")
x, y = np.meshgrid(np.arange(grid_size), np.arange(grid_size))
z = activation_map

fig3d = go.Figure(data=[
    go.Surface(z=z, x=x, y=y, colorscale="Inferno", showscale=False),
    go.Scatter3d(
        x=x[insight_mask], y=y[insight_mask], z=z[insight_mask] + 0.2,
        mode='markers',
        marker=dict(size=6, color='cyan'),
        name="Bel√°t√°si pontok"
    )
])
fig3d.update_layout(title="3D Aktiv√°ci√≥s t√©rk√©p", scene=dict(
    xaxis_title="X",
    yaxis_title="Y",
    zaxis_title="Aktiv√°ci√≥"
))
st.plotly_chart(fig3d, use_container_width=True)

# --- Eredm√©nyek ---
st.subheader("üß† Bel√°t√°s eredm√©nye")
if insight_flag:
    st.success("‚úÖ Bel√°t√°s megt√∂rt√©nt! Az aktiv√°ci√≥ √°tl√©pte a k√ºsz√∂b√©rt√©ket.")
else:
    st.warning("‚ùå M√©g nem t√∂rt√©nt meg a bel√°t√°s. N√∂veld az epiz√≥dok sz√°m√°t vagy cs√∂kkentsd a k√ºsz√∂b√∂t.")

# --- CSV export ---
st.subheader("üì• CSV export")
df_export = pd.DataFrame(activation_map)
csv = df_export.to_csv(index=False).encode("utf-8")
st.download_button("‚¨áÔ∏è Aktiv√°ci√≥s m√°trix let√∂lt√©se", data=csv, file_name="insight_activation_map.csv")

# --- Tudom√°nyos h√°tt√©r ---
st.markdown("### üìò Tudom√°nyos h√°tt√©r")
st.markdown(r"""
A **bel√°t√°sos tanul√°s** egy olyan tanul√°si forma, ahol a megold√°s *nem fokozatosan* j√∂n l√©tre,
hanem egy hirtelen felismer√©s r√©v√©n:

#### Matematikai modell:

Az aktiv√°ci√≥s √©rt√©kek egy r√°csban gy≈±lnek √∂ssze epiz√≥donk√©nt:

$$
A(x, y, t) = A(x, y, t-1) + \delta
$$

Ahol:
- \( A(x, y, t) \) az adott hely aktiv√°ci√≥ja \( t \)-edik id≈ëpillanatban
- \( \delta \) az aktiv√°ci√≥s hozz√°j√°rul√°s

A bel√°t√°s akkor t√∂rt√©nik, ha:

$$
\max_{x, y} A(x, y) \geq \theta
$$

Ahol:
- \( \theta \) a bel√°t√°si k√ºsz√∂b

#### Haszn√°lhat√≥s√°g:
- Probl√©mamegold√°s modellez√©se
- Viselked√©s √©s mem√≥ria tanulm√°nyoz√°sa
- Kreat√≠v AI rendszerek szimul√°ci√≥ja

#### K√∂vetkeztet√©s:
A modell lehet≈ëv√© teszi annak vizsg√°lat√°t, hogy milyen felt√©telek mellett t√∂rt√©nik ‚Äûaha‚Äù √©lm√©ny, √©s mik√©nt terjed az aktiv√°ci√≥ a mem√≥riarendszerben.
""")

# K√∂telez≈ë Streamlit h√≠v√°s
app = run = lambda: None

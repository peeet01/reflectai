import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# --- Berry-g√∂rb√ºlet sz√°m√≠t√°sa ---
def compute_berry_curvature(kx, ky):
    delta = 0.1
    d = np.array([
        np.sin(kx),
        np.sin(ky),
        delta + np.cos(kx) + np.cos(ky)
    ])
    norm = np.linalg.norm(d)
    d_hat = d / norm
    return 0.5 * d_hat[2] / (norm**2 + 1e-8)

# --- Berry-f√°zis sz√°m√≠t√°sa k√∂r ment√©n a k-t√©rben ---
def compute_berry_phase(radius=1.0, center=(0.0, 0.0), num_points=200):
    delta = 0.1
    thetas = np.linspace(0, 2 * np.pi, num_points, endpoint=False)
    phase_sum = 0.0

    for i in range(num_points):
        theta1 = thetas[i]
        theta2 = thetas[(i + 1) % num_points]
        k1 = np.array([
            center[0] + radius * np.cos(theta1),
            center[1] + radius * np.sin(theta1)
        ])
        k2 = np.array([
            center[0] + radius * np.cos(theta2),
            center[1] + radius * np.sin(theta2)
        ])

        d1 = np.array([np.sin(k1[0]), np.sin(k1[1]), delta + np.cos(k1[0]) + np.cos(k1[1])])
        d2 = np.array([np.sin(k2[0]), np.sin(k2[1]), delta + np.cos(k2[0]) + np.cos(k2[1])])
        u1 = d1 / np.linalg.norm(d1)
        u2 = d2 / np.linalg.norm(d2)

        inner_prod = np.vdot(u1, u2)
        phase = np.angle(inner_prod)
        phase_sum += phase

    return np.real(phase_sum)

# --- 3D vizualiz√°ci√≥ a d-vektor p√°ly√°j√°r√≥l ---
def plot_berry_phase_3d(radius=1.0, center=(0.0, 0.0), num_points=200):
    delta = 0.1
    thetas = np.linspace(0, 2 * np.pi, num_points)
    traj = []

    for theta in thetas:
        kx = center[0] + radius * np.cos(theta)
        ky = center[1] + radius * np.sin(theta)
        d = np.array([
            np.sin(kx),
            np.sin(ky),
            delta + np.cos(kx) + np.cos(ky)
        ])
        d /= np.linalg.norm(d)
        traj.append(d)

    traj = np.array(traj)
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    ax.plot(traj[:, 0], traj[:, 1], traj[:, 2], label="d-vektor p√°lya", color="purple")
    ax.set_title("3D Berry-f√°zis vizualiz√°ci√≥ ‚Äì d-vektor p√°lya")
    ax.set_xlabel("d‚ÇÅ")
    ax.set_ylabel("d‚ÇÇ")
    ax.set_zlabel("d‚ÇÉ")
    ax.legend()
    st.pyplot(fig)

# --- Streamlit f≈ë modul ---
def run():
    st.header("üåÄ Topol√≥giai v√©detts√©g √©s Berry-g√∂rb√ºlet")
    st.markdown("Ez a szimul√°ci√≥ a 2D Brillouin-z√≥n√°ban vizsg√°lja a Berry-g√∂rb√ºlet eloszl√°s√°t.")

    # --- Berry-g√∂rb√ºlet t√©rk√©p ---
    N = st.slider("Pontok sz√°ma tengelyenk√©nt", 30, 150, 80, 10)
    kx_vals = np.linspace(-np.pi, np.pi, N)
    ky_vals = np.linspace(-np.pi, np.pi, N)
    curvature = np.zeros((N, N))

    for i, kx in enumerate(kx_vals):
        for j, ky in enumerate(ky_vals):
            curvature[j, i] = compute_berry_curvature(kx, ky)

    fig, ax = plt.subplots()
    c = ax.contourf(kx_vals, ky_vals, curvature, levels=50, cmap='coolwarm')
    fig.colorbar(c, ax=ax, label="Berry-g√∂rb√ºlet")
    ax.set_xlabel("kx")
    ax.set_ylabel("ky")
    ax.set_title("Berry-g√∂rb√ºlet a Brillouin-z√≥n√°ban")
    st.pyplot(fig)

    # --- √öJ: Berry-f√°zis kisz√°m√≠t√°sa k√∂r ment√©n ---
    with st.expander("üîÑ Berry-f√°zis sz√°m√≠t√°sa (k√∂rintegr√°l)"):
        st.markdown("A Berry-f√°zis egy kvantummechanikai geometriai f√°zis, amit egy z√°rt k√∂rt le√≠rva a k-t√©rben sz√°m√≠tunk.")
        radius = st.slider("K√∂r sugara (k-t√©r)", 0.1, 3.0, 1.0, 0.1)
        center_kx = st.slider("K√∂r k√∂z√©ppontja ‚Äì kx", -np.pi, np.pi, 0.0)
        center_ky = st.slider("K√∂r k√∂z√©ppontja ‚Äì ky", -np.pi, np.pi, 0.0)
        num_points = st.slider("Pontok sz√°ma a k√∂r ment√©n", 50, 500, 200, 10)

        berry_phase = compute_berry_phase(radius=radius, center=(center_kx, center_ky), num_points=num_points)
        st.success(f"üìê Berry-f√°zis √©rt√©ke ‚âà `{berry_phase:.4f}` radi√°n")

    # --- √öJ: 3D vizualiz√°ci√≥ ---
    with st.expander("üåê 3D Berry-f√°zis p√°lya"):
        st.markdown("A kvantum√°llapot ir√°ny√°nak v√°ltoz√°sa 3D t√©rben (d-vektor normaliz√°lt p√°ly√°ja).")
        plot_berry_phase_3d(radius=radius, center=(center_kx, center_ky), num_points=num_points)

# üîß K√∂telez≈ë dinamikus modul bel√©p√©si pont
app = run

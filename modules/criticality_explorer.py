import streamlit as st
import numpy as np
import pandas as pd
import plotly.graph_objects as go

def generate_soc_signal(n, p):
    signal = np.zeros(n)
    for i in range(1, n):
        signal[i] = signal[i - 1] + np.random.choice([-1, 1], p=[1 - p, p])
    return signal

def detect_avalanches(signal, threshold):
    above = signal > threshold
    starts = np.where((~above[:-1]) & (above[1:]))[0] + 1
    ends = np.where((above[:-1]) & (~above[1:]))[0] + 1
    if starts.size == 0 or ends.size == 0:
        return np.array([])
    if ends[0] < starts[0]:
        ends = ends[1:]
    if starts.size > ends.size:
        starts = starts[:-1]
    durations = ends - starts
    return durations

def run():
    st.title("üåã Criticality Explorer ‚Äì √ñnszervez≈ëd≈ë kritikuss√°g")
    st.markdown("Vizsg√°ld meg, hogyan jelenik meg az **√∂nszervez≈ëd≈ë kritikuss√°g (SOC)** egyszer≈± szimul√°ci√≥kban.")

    # Param√©terek
    n = st.slider("Jel hossza", 500, 10000, 3000, step=100)
    p = st.slider("Elmozdul√°s val√≥sz√≠n≈±s√©ge (p)", 0.01, 1.0, 0.5, step=0.01)
    threshold = st.slider("K√ºsz√∂bszint (avalanches)", 0.1, 10.0, 3.0, step=0.1)

    # Szimul√°ci√≥
    signal = generate_soc_signal(n, p)
    avalanches = detect_avalanches(signal, threshold)

    # Plotly 3D vizualiz√°ci√≥
    st.subheader("üìä Jel alakul√°sa 3D-ben")
    fig3d = go.Figure(data=[go.Scatter3d(
        x=np.arange(len(signal)),
        y=signal,
        z=np.zeros_like(signal),
        mode='lines',
        line=dict(width=3)
    )])
    fig3d.update_layout(scene=dict(
        xaxis_title="Id≈ë",
        yaxis_title="Jel",
        zaxis_title="",
    ), margin=dict(l=0, r=0, b=0, t=30), height=500)
    st.plotly_chart(fig3d)

    # Histogram of avalanche durations
    st.subheader("üìà Avalanche id≈ëtartamok eloszl√°sa")
    if avalanches.size > 0:
        hist_df = pd.DataFrame(avalanches, columns=["Duration"])
        st.bar_chart(hist_df["Duration"].value_counts().sort_index())
    else:
        st.warning("Nem √©szlelhet≈ë lavina a megadott k√ºsz√∂bszinten.")

    # CSV export
    st.subheader("üì• Export")
    df_export = pd.DataFrame({
        "index": np.arange(len(signal)),
        "signal": signal
    })
    csv = df_export.to_csv(index=False).encode("utf-8")
    st.download_button("Jel let√∂lt√©se CSV-ben", data=csv, file_name="critical_signal.csv")

    # Tudom√°nyos h√°tt√©r
    st.markdown("### üìö Tudom√°nyos h√°tt√©r")
    st.markdown("""
**√ñnszervez≈ëd≈ë kritikuss√°g (SOC)** olyan dinamikus rendszerek jellemz≈ëje, amelyek bels≈ë szab√°lyaik alapj√°n term√©szetes m√≥don √°ll√≠t√≥dnak be a kritikus pontra, k√ºls≈ë finomhangol√°s n√©lk√ºl.

---

#### üß† Jelent≈ës√©ge:

- **Kritikus √°llapotban** a rendszer **sk√°laf√ºggetlen** viselked√©st mutat (pl. lavina-m√©ret eloszl√°s hatv√°nyf√ºggv√©ny szerint).
- Megfigyelhet≈ë idegrendszerben (EEG, spike sorozatok), f√∂ldreng√©sekben, p√©nz√ºgyi rendszerekben.

---

#### ‚öôÔ∏è Egyszer≈± modell:

A szimul√°ci√≥ban egy **egydimenzi√≥s zajos s√©ta** jel reproduk√°lja a kritikus dinamika egy lehets√©ges form√°j√°t. A lavin√°k a k√ºsz√∂bszintet √°tl√©p≈ë aktivit√°sokb√≥l sz√°rmaznak.

---

#### üß™ Felhaszn√°l√°s az appban:

- Szimul√°lhat√≥, hogyan alakulnak ki **kritikus esem√©nyek** egyszer≈± szab√°lyrendszerekb≈ël.
- Vizsg√°lhat√≥ a **threshold** √©s a **p** param√©ter hat√°sa az esem√©nyek s≈±r≈±s√©g√©re √©s sk√°l√°j√°ra.
- El≈ëseg√≠ti a **top-down** rendszer√©rtelmez√©st adatvez√©relt vizsg√°latok el≈ëtt.
    """)

# Entry point
app = run

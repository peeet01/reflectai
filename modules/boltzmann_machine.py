import streamlit as st
import numpy as np
import pandas as pd
import plotly.graph_objects as go

st.set_page_config(layout="wide")

# üîÅ Sigmoid aktiv√°ci√≥
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

# üîÑ RBM s√∫lyfriss√≠t√©s
def train_rbm(data, n_hidden, epochs, lr):
    n_visible = data.shape[1]
    weights = np.random.normal(0, 0.1, (n_visible, n_hidden))
    history = []

    for epoch in range(epochs):
        # Pozit√≠v f√°zis
        pos_hidden_probs = sigmoid(np.dot(data, weights))
        pos_associations = np.dot(data.T, pos_hidden_probs)

        # Rekonstrukci√≥
        neg_visible_probs = sigmoid(np.dot(pos_hidden_probs, weights.T))
        neg_hidden_probs = sigmoid(np.dot(neg_visible_probs, weights))
        neg_associations = np.dot(neg_visible_probs.T, neg_hidden_probs)

        # S√∫lyfriss√≠t√©s
        weights += lr * (pos_associations - neg_associations.T) / data.shape[0]

        history.append(weights.copy())

    return weights, np.array(history)

# üéõÔ∏è Fel√ºlet
def run():
    st.title("üß† Boltzmann Machine ‚Äì Energetikai tanul√°svizualiz√°ci√≥")

    st.markdown("""
    Ez a szimul√°ci√≥ egy **Restricted Boltzmann Machine (RBM)** egyszer≈±s√≠tett tanul√°si folyamat√°t mutatja be.  
    A rendszer egyenergi√°j√∫ √°llapotokat tanul meg, √©s pr√≥b√°lja rekonstru√°lni a bemenetet.

    A tanul√°s sor√°n a s√∫lyok v√°ltoz√°s√°t k√∂vetheted 3D vizualiz√°ci√≥val.
    """)

    n_visible = st.slider("üî¢ L√°that√≥ egys√©gek sz√°ma", 2, 10, 4)
    n_hidden = st.slider("üß† Rejtett egys√©gek sz√°ma", 2, 10, 3)
    epochs = st.slider("‚è±Ô∏è Epoch-ok", 1, 100, 30)
    lr = st.slider("üìà Tanul√°si r√°ta", 0.001, 0.2, 0.05)

    # üî£ Adat gener√°l√°s (egyszer≈± bin√°ris input)
    data = np.random.randint(0, 2, (100, n_visible))

    weights, history = train_rbm(data, n_hidden, epochs, lr)

    st.subheader("üìä 3D Plotly vizualiz√°ci√≥ a s√∫lyt√©r v√°ltoz√°sair√≥l")
    frames = []

    for epoch in range(history.shape[0]):
        w = history[epoch]
        x, y, z = np.meshgrid(np.arange(n_visible), np.arange(n_hidden), [epoch])
        u = x.flatten()
        v = y.flatten()
        w_values = w.T.flatten()
        frames.append(go.Scatter3d(
            x=u,
            y=v,
            z=np.full_like(u, epoch),
            mode='markers',
            marker=dict(size=6, color=w_values, colorscale='Inferno', opacity=0.8),
            name=f"Epoch {epoch}"
        ))

    fig = go.Figure(data=frames)
    fig.update_layout(
        scene=dict(
            xaxis_title="L√°that√≥ egys√©g",
            yaxis_title="Rejtett egys√©g",
            zaxis_title="Epoch"
        ),
        margin=dict(l=0, r=0, b=0, t=40),
        height=600
    )
    st.plotly_chart(fig)

    st.markdown("### üìò Matematikai h√°tt√©r")
    st.latex(r"E(v, h) = -\sum_i v_i a_i - \sum_j h_j b_j - \sum_{i,j} v_i h_j w_{ij}")
    st.markdown("""
    A Boltzmann-g√©p c√©lja az **energiaf√ºggv√©ny minimaliz√°l√°sa**, ahol:
    
    - \(v_i\): l√°that√≥ egys√©g √°llapota  
    - \(h_j\): rejtett egys√©g √°llapota  
    - \(a_i, b_j\): bias √©rt√©kek (itt kihagyva)  
    - \(w_{ij}\): s√∫ly a \(v_i \leftrightarrow h_j\) kapcsolatban

    **Tanul√°si szab√°ly:**
    $$ \Delta w_{ij} = \epsilon (\langle v_i h_j \\rangle_{\text{data}} - \langle v_i h_j \\rangle_{\text{recon}}) $$

    - Az elv a **g√∂rbe alatti energiafel√ºlet tanul√°sa**: az inputokat jellemz≈ë eloszl√°st a s√∫lyok internaliz√°lj√°k.

    **Alkalmaz√°sok:**
    - Jellemz≈ëkinyer√©s (feature learning)
    - Eloszl√°s-modellez√©s
    - M√©ly tanul√°si architekt√∫r√°k (Deep Belief Network alapja)

    A Boltzmann Machine alapvet≈ë tanul√°si mint√°zatokat reprezent√°l.
    """)

    st.download_button(
        "üì• S√∫lyt√∂rt√©net let√∂lt√©se (CSV)",
        data=pd.DataFrame(history[-1]).to_csv(index=False).encode("utf-8"),
        file_name="rbm_weights.csv"
    )

# App futtat√°s
app = run

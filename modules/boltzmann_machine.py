import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import plotly.graph_objects as go

def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def run():
    st.title("üå°Ô∏è Boltzmann-g√©p ‚Äì Energi√°n alapul√≥ tanul√°s")

    st.markdown("""
    A **Boltzmann-g√©p** egy generat√≠v, energi√°n alapul√≥ modell, amely k√©pes **mint√°zatokat t√°rolni √©s rekonstru√°lni**.
    A tanul√°s alapja az energia minimaliz√°l√°sa √©s a val√≥sz√≠n≈±s√©gi aktiv√°ci√≥.

    Az al√°bbi szimul√°ci√≥ egy kis **Bin√°ris Boltzmann-g√©pet** mutat be.
    """)

    # üîß Param√©terek
    n_visible = st.slider("L√°that√≥ egys√©gek sz√°ma", 2, 10, 6)
    n_hidden = st.slider("Rejtett egys√©gek sz√°ma", 2, 10, 4)
    temperature = st.slider("H≈ëm√©rs√©klet (T)", 0.1, 5.0, 1.0, 0.1)
    epochs = st.slider("Epochok sz√°ma", 10, 500, 100, 10)

    np.random.seed(42)
    W = np.random.normal(0, 0.1, size=(n_visible + n_hidden, n_visible + n_hidden))
    np.fill_diagonal(W, 0)
    state = np.random.randint(0, 2, size=n_visible + n_hidden)

    # üìâ Energia sz√°m√≠t√°s
    def energy(s, W):
        return -0.5 * np.dot(s, np.dot(W, s.T))

    energies = []
    snapshots = []

    for _ in range(epochs):
        for i in range(len(state)):
            net_input = np.dot(W[i], state)
            p = sigmoid(net_input / temperature)
            state[i] = np.random.rand() < p
        energies.append(energy(state, W))
        snapshots.append(state.copy())

    snapshots = np.array(snapshots)

    # üìà Energia alakul√°sa
    st.subheader("üìâ Energiag√∂rbe")
    fig1, ax1 = plt.subplots()
    ax1.plot(energies, color='orange')
    ax1.set_xlabel("Iter√°ci√≥")
    ax1.set_ylabel("Energia")
    ax1.set_title("Rendszer energi√°j√°nak alakul√°sa")
    st.pyplot(fig1)

    # üåê 3D √Ållapott√©r vizualiz√°ci√≥ (redund√°ns t√©rk√©p)
    st.subheader("üåê 3D √Ållapotmint√°k vizualiz√°ci√≥ja")
    if n_visible + n_hidden >= 3:
        fig3d = go.Figure(data=[go.Scatter3d(
            x=snapshots[:, 0],
            y=snapshots[:, 1],
            z=snapshots[:, 2],
            mode='markers+lines',
            marker=dict(size=3, color=np.arange(len(snapshots)), colorscale='Viridis'),
            line=dict(width=2)
        )])
        fig3d.update_layout(
            scene=dict(xaxis_title='Bit 0', yaxis_title='Bit 1', zaxis_title='Bit 2'),
            margin=dict(l=0, r=0, b=0, t=30)
        )
        st.plotly_chart(fig3d, use_container_width=True)
    else:
        st.info("3D megjelen√≠t√©shez legal√°bb 3 egys√©g sz√ºks√©ges.")

    # üíæ CSV export
    st.subheader("üíæ √Ållapotmint√°k export√°l√°sa")
    df = pd.DataFrame(snapshots, columns=[f"unit_{i}" for i in range(n_visible + n_hidden)])
    csv = df.to_csv(index=False).encode("utf-8")
    st.download_button("‚¨áÔ∏è Let√∂lt√©s CSV-ben", data=csv, file_name="boltzmann_states.csv")

    # üìò Tudom√°nyos h√°tt√©r
    st.markdown("### üìò Tudom√°nyos h√°tt√©r")
    st.latex(r"""
    E(s) = -\frac{1}{2} s^T W s
    """)
    st.markdown("""
    - \( s \): bin√°ris √°llapotvektor
    - \( W \): s√∫lym√°trix (szimmetrikus, √∂nmag√°t nem kapcsolja)
    - Az alacsonyabb energia√°llapotok val√≥sz√≠n≈±bbek

    A tanul√°s c√©lja, hogy a rendszer az **alacsony energi√°j√∫ √°llapotokat r√©szes√≠tse el≈ënyben**,  
    melyek reprezent√°lj√°k az eltanult mint√°kat.

    **Felhaszn√°l√°s:**
    - Mintafelismer√©s
    - Dimenzi√≥cs√∂kkent√©s (m√©ly Boltzmann-h√°l√≥k)
    - Generat√≠v modellez√©s
    """)

app = run

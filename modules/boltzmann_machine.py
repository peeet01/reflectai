import streamlit as st
import numpy as np
import plotly.graph_objects as go
import matplotlib.pyplot as plt
import pandas as pd

# === Boltzmann-eloszl√°s defin√≠ci√≥ja ===
def boltzmann_distribution(energy, T, k=1.0):
    return np.exp(-energy / (k * T))

# === Energia t√©r gener√°l√°sa ===
def generate_energy_surface(x_range, y_range, scale=1.0):
    x = np.linspace(*x_range, 100)
    y = np.linspace(*y_range, 100)
    X, Y = np.meshgrid(x, y)
    Z = scale * (X**2 + Y**2)
    return X, Y, Z

# === Main app ===
def run():
    st.set_page_config(layout="wide")
    st.title("üå°Ô∏è Boltzmann-eloszl√°s ‚Äì Energia √©s val√≥sz√≠n≈±s√©gi eloszl√°s")

    st.markdown("""
    A **Boltzmann-eloszl√°s** le√≠rja a r√©szecsk√©k energia szerinti eloszl√°s√°t egy h≈ëm√©rs√©kleten.  
    Az energia n√∂veked√©s√©vel a val√≥sz√≠n≈±s√©g exponenci√°lisan cs√∂kken.
    
    A k√∂vetkez≈ë vizualiz√°ci√≥ egy 2D energiateret gener√°l, amelyhez hozz√°rendelj√ºk a Boltzmann-s√∫lyokat, majd 3D-ben √°br√°zoljuk.
    """)

    # === Be√°ll√≠t√°sok ===
    st.sidebar.header("‚öôÔ∏è Param√©terek")
    T = st.sidebar.slider("H≈ëm√©rs√©klet (T)", 0.1, 5.0, 1.0, 0.1)
    energy_scale = st.sidebar.slider("Energiafel√ºlet sk√°l√°z√°sa", 0.1, 5.0, 1.0, 0.1)
    x_range = (-3, 3)
    y_range = (-3, 3)

    # === Energiafel√ºlet ===
    X, Y, E = generate_energy_surface(x_range, y_range, scale=energy_scale)
    P = boltzmann_distribution(E, T)
    
    # === 3D Plotly grafikon ===
    st.subheader("üåê 3D Boltzmann-eloszl√°s fel√ºlet")
    fig3d = go.Figure(data=[go.Surface(
        x=X, y=Y, z=P,
        surfacecolor=E,
        colorscale='Viridis',
        colorbar=dict(title='Energia'),
        showscale=True
    )])
    fig3d.update_layout(
        scene=dict(
            xaxis_title='X',
            yaxis_title='Y',
            zaxis_title='Val√≥sz√≠n≈±s√©g',
        ),
        title="Boltzmann-eloszl√°s energiaf√ºggv√©ny ment√©n",
        margin=dict(l=0, r=0, t=60, b=0),
        height=600
    )
    st.plotly_chart(fig3d, use_container_width=True)

    # === 2D metszet ===
    st.subheader("üìà 2D metszet az energia ment√©n")
    E_1d = np.linspace(0, 10, 200)
    P_1d = boltzmann_distribution(E_1d, T)

    fig2d, ax = plt.subplots()
    ax.plot(E_1d, P_1d, color="crimson")
    ax.set_xlabel("Energia")
    ax.set_ylabel("Val√≥sz√≠n≈±s√©g")
    ax.set_title(f"Boltzmann-eloszl√°s (T = {T})")
    st.pyplot(fig2d)

    # === CSV let√∂lt√©s ===
    st.subheader("üì• CSV export")
    df = pd.DataFrame({
        "X": X.flatten(),
        "Y": Y.flatten(),
        "Energia": E.flatten(),
        "Val√≥sz√≠n≈±s√©g": P.flatten()
    })
    csv = df.to_csv(index=False).encode("utf-8")
    st.download_button("‚¨áÔ∏è Let√∂lt√©s (CSV)", data=csv, file_name="boltzmann_distribution.csv")

    # === Tudom√°nyos h√°tt√©r ===
    st.markdown("### üìö Tudom√°nyos h√°tt√©r")
    st.latex(r"""
    P(E) = \frac{1}{Z} \exp\left(-\frac{E}{kT}\right)
    """)
    st.markdown("""
    - **\( P(E) \)**: val√≥sz√≠n≈±s√©g, hogy a rendszer \( E \) energi√°j√∫ √°llapotban van  
    - **\( k \)**: Boltzmann-√°lland√≥ (itt 1-nek tekintj√ºk)  
    - **\( T \)**: h≈ëm√©rs√©klet  
    - **\( Z \)**: part√≠ci√≥s f√ºggv√©ny (√∂sszegz√©s minden lehets√©ges √°llapoton)

    Az eloszl√°s alapja a **termodinamika** √©s **statikus fizika** t√∂rv√©nyein alapul, valamint sz√©lesk√∂r≈± alkalmaz√°sa van:
    - Molekul√°ris dinamika
    - Anyagszerkezetek modellez√©se
    - Val√≥sz√≠n≈±s√©gi g√©pi tanul√°s (pl. Boltzmann-g√©pek)
    """)

# App futtat√°sa ReflectAI-hez
app = run

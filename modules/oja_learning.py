import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import plotly.graph_objects as go

def generate_input_data(kind, dim, samples):
    if kind == "Gauss":
        return np.random.randn(samples, dim)
    elif kind == "Uniform":
        return np.random.rand(samples, dim) - 0.5
    elif kind == "Clustered":
        centers = np.random.randn(3, dim) * 2
        data = np.vstack([np.random.randn(samples // 3, dim) + c for c in centers])
        return data
    else:
        return np.zeros((samples, dim))

def oja_learning(X, eta, epochs):
    # opcion√°lis: k√∂z√©pre tol√°s
    Xc = X - np.mean(X, axis=0, keepdims=True)

    # inicializ√°l√°s
    w = np.random.randn(X.shape[1])
    w /= np.linalg.norm(w) + 1e-12

    history = []

    for _ in range(epochs):
        idx = np.random.permutation(len(Xc))
        for x in Xc[idx]:
            y = np.dot(w, x)
            dw = eta * y * (x - y * w)  # Oja update
            w += dw
            history.append(w.copy())

        # numerikai stabiliz√°l√°s
        nrm = np.linalg.norm(w)
        if not np.isfinite(nrm) or nrm > 1e6:
            w /= nrm + 1e-12

    return np.array(history)

def run():
    st.title("üß† Oja Learning ‚Äì PCA-szer≈± tanul√°s")
    st.markdown("A modell egyetlen neuron s√∫lyait tan√≠tja meg √∫gy, hogy a bemeneti adatok f≈ë komponens√©t tanulja meg.")

    kind = st.selectbox("Bemenet t√≠pusa", ["Gauss", "Uniform", "Clustered"])
    dim = st.slider("Dimenzi√≥", 2, 5, 3)
    samples = st.slider("Mint√°k sz√°ma", 100, 1000, 300, step=50)
    eta = st.slider("Tanul√°si r√°ta (Œ∑)", 0.001, 0.1, 0.01, step=0.001)
    epochs = st.slider("Epoch-ok sz√°ma", 1, 20, 10)

    X = generate_input_data(kind, dim, samples)
    history = oja_learning(X, eta, epochs)

    st.subheader("üìà S√∫lyfejl≈ëd√©s (2D)")
    fig, ax = plt.subplots()
    for i in range(history.shape[1]):
        ax.plot(history[:, i], label=f"w{i}")
    ax.set_xlabel("Iter√°ci√≥")
    ax.set_ylabel("S√∫ly √©rt√©k")
    ax.set_title("S√∫lyv√°ltoz√°s Oja tanul√°s sor√°n")
    ax.legend()
    st.pyplot(fig)

    st.subheader("üìä S√∫lyvektor p√°lya 3D-ben")
    if history.shape[1] >= 3:
        fig3d = go.Figure(data=[go.Scatter3d(
            x=history[:, 0],
            y=history[:, 1],
            z=history[:, 2],
            mode="lines+markers",
            marker=dict(size=3),
            line=dict(width=2)
        )])
        fig3d.update_layout(
            scene=dict(xaxis_title="w0", yaxis_title="w1", zaxis_title="w2"),
            margin=dict(l=0, r=0, b=0, t=30),
            height=500
        )
        st.plotly_chart(fig3d)
    else:
        st.info("A 3D vizualiz√°ci√≥hoz legal√°bb 3 dimenzi√≥ sz√ºks√©ges.")

    st.subheader("üì• CSV Export")
    df = pd.DataFrame(history, columns=[f"w{i}" for i in range(history.shape[1])])
    csv = df.to_csv(index_label="iter√°ci√≥").encode("utf-8")
    st.download_button("S√∫lyt√∂rt√©net let√∂lt√©se", data=csv, file_name="oja_weights.csv")

    st.markdown("### üìö Tudom√°nyos h√°tt√©r")
    st.markdown(r"""
Az **Oja-tanul√°si szab√°ly** a Hebbian tanul√°s normaliz√°lt v√°ltozata, amely stabiliz√°lja a s√∫lyok hossz√°t.

**C√©l:** a neuron megtanulja a bemenet f≈ë ir√°ny√°t ‚Äì hasonl√≥an a f≈ëkomponens-anal√≠zishez (PCA).

**Tanul√°si szab√°ly:**

$$
\Delta w = \eta \cdot y \cdot (x - y \cdot w)
$$

Ahol:
- \( x \) a bemenet,
- \( w \) a s√∫lyvektor,
- \( y = w^T x \) a neuron kimenete,
- \( \eta \) a tanul√°si r√°ta.

A s√∫lyok konverg√°lnak az els≈ë f≈ëkomponens ir√°ny√°ba.

**Felhaszn√°l√°s:**
- Neur√°lis PCA tan√≠t√°s
- √ârz√©kenys√©gi ir√°nyok tanul√°sa
- Nem fel√ºgyelt tanul√°s alapmodellje
""")

app = run

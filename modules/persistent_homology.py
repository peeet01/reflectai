import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import plotly.graph_objects as go
from sklearn.datasets import make_moons
from ripser import ripser
from persim import plot_diagrams

def run():
    st.title("üî∑ Perzisztens homol√≥gia ‚Äì Topol√≥giai adatelemz√©s")

    st.markdown("""
A **perzisztens homol√≥gia** a topol√≥giai adatfeldolgoz√°s egyik m√≥dszere, amely  
a geometriai strukt√∫r√°k stabilit√°s√°t vizsg√°lja k√ºl√∂nb√∂z≈ë sk√°l√°k ment√©n.  
Ez az eszk√∂z k√©pes kimutatni klasztereket, ciklusokat √©s m√°s rejtett topol√≥giai jegyeket a mint√°kb√≥l.

A k√∂vetkez≈ë p√©ld√°kban szintetikus adatokat elemz√ºnk a **Ripser** √©s **Persim** k√∂nyvt√°rak seg√≠ts√©g√©vel.
    """)

    dataset = st.selectbox("üß© Adatk√©szlet", ["K√©t f√©lhold", "V√©letlen pontok", "K√∂r√∂k"])
    n_samples = st.slider("üìä Mint√°k sz√°ma", 20, 1000, 300)

    if dataset == "K√©t f√©lhold":
        X, _ = make_moons(n_samples=n_samples, noise=0.05)
    elif dataset == "V√©letlen pontok":
        X = np.random.rand(n_samples, 2)
    elif dataset == "K√∂r√∂k":
        t = np.linspace(0, 2 * np.pi, n_samples)
        r = 1 + 0.1 * np.random.randn(n_samples)
        X = np.stack([r * np.cos(t), r * np.sin(t)], axis=1)

    st.subheader("üîò Pontfelh≈ë (2D)")
    fig1, ax1 = plt.subplots()
    ax1.scatter(X[:, 0], X[:, 1], s=10)
    ax1.set_aspect("equal")
    ax1.set_title("Adatpontok")
    st.pyplot(fig1)

    st.subheader("üåê 3D Plotly pontfelh≈ë")
    z_vals = np.sin(X[:, 0] * 3) * np.cos(X[:, 1] * 3)  # m≈±vi m√©lys√©gdimenzi√≥
    fig3d = go.Figure(data=[go.Scatter3d(
        x=X[:, 0], y=X[:, 1], z=z_vals,
        mode='markers',
        marker=dict(size=4, color=z_vals, colorscale='Viridis', opacity=0.8)
    )])
    fig3d.update_layout(
        title="3D sz√≠nes pontfelh≈ë",
        scene=dict(
            xaxis_title="X",
            yaxis_title="Y",
            zaxis_title="Z (szintetikus)"
        ),
        margin=dict(l=0, r=0, b=0, t=40)
    )
    st.plotly_chart(fig3d, use_container_width=True)

    st.subheader("üìä Perzisztencia diagram")
    result = ripser(X)['dgms']
    fig2, ax2 = plt.subplots()
    plot_diagrams(result, ax=ax2)
    st.pyplot(fig2)

    st.markdown("### üìö Tudom√°nyos h√°tt√©r")
    st.markdown("""
A **perzisztens homol√≥gia** a **topol√≥giai adatanal√≠zis (TDA)** r√©sze,  
amely az adatokban rejl≈ë alakzatokat √©s mint√°zatokat elemzi k√ºl√∂nb√∂z≈ë sk√°l√°kon.  
Ez lehet≈ëv√© teszi, hogy a zajt√≥l eltekintve a val√≥ban tart√≥s geometriai jellemz≈ëk megmaradjanak.

#### ‚ÑπÔ∏è Fogalmak:
- **H‚ÇÄ komponensek** ‚Äì diszjunkt klaszterek sz√°ma  
- **H‚ÇÅ komponensek** ‚Äì ciklusok (pl. k√∂r, lyuk) jelenl√©te  
- **Perzisztencia** ‚Äì az az intervallum, am√≠g egy topol√≥giai jegy l√©tezik

#### üìà Diagram:
- Az X tengely a megjelen√©s sk√°l√°j√°t,  
- Az Y tengely az elt≈±n√©s sk√°l√°j√°t mutatja.  
- A f≈ë√°tl√≥t√≥l val√≥ t√°vols√°g a jellemz≈ë "fontoss√°g√°t" jelzi.

#### üß† Alkalmaz√°si ter√ºletek:
- K√©pfeldolgoz√°s √©s alakfelismer√©s  
- Id≈ësorok elemz√©se  
- Neur√°lis adatok topol√≥giai elemz√©se  
- Adatok struktur√°lis √∂sszehasonl√≠t√°sa

A topol√≥giai jellemz≈ëk "√©lettartam√°n" kereszt√ºl stabil √©s jelent≈ës mint√°zatok emelhet≈ëk ki,  
amelyek g√©pi tanul√°si modellek sz√°m√°ra robusztus bemenetk√©nt szolg√°lhatnak.
    """)

# K√∂telez≈ë ReflectAI-kompatibilit√°s
app = run

import streamlit as st
import pandas as pd
import numpy as np

@st.cache_data(show_spinner=False)
def load_data(uploaded_file):
    """CSV f√°jl beolvas√°sa √©s cache-el√©se."""
    if uploaded_file is not None:
        try:
            df = pd.read_csv(uploaded_file)
            return df
        except Exception as e:
            st.error(f"Hiba a f√°jl beolvas√°sakor: {e}")
    return None


def get_uploaded_data(required_columns=None, allow_default=False, default=None):
    """
    Adatfelt√∂lt≈ë komponens, amely:
    - CSV-t k√©r be,
    - ellen≈ërzi a sz√ºks√©ges oszlopokat (ha van megadva),
    - ha nincs f√°jl, fallback adatot t√∂lt be (ha enged√©lyezett),
    - session_state-be menti a bet√∂lt√∂tt adatot.

    Visszat√©r: pandas.DataFrame vagy None
    """
    st.sidebar.subheader("üìÅ Adatfelt√∂lt√©s")
    uploaded_file = st.sidebar.file_uploader("T√∂lts fel egy CSV f√°jlt", type=["csv"])
    df = load_data(uploaded_file)

    # Fallback (pl. XOR, Lorenz stb.)
    if df is None and allow_default and default:
        st.sidebar.warning(f"‚ö†Ô∏è Nincs f√°jl, fallback: `{default}` adatk√©szlet")
        df = get_default_data(default)

    if df is not None:
        if required_columns:
            missing = [col for col in required_columns if col not in df.columns]
            if missing:
                st.error(f"‚ùå Hi√°nyz√≥ oszlop(ok): {', '.join(missing)}")
                return None
        st.session_state["uploaded_df"] = df
        st.sidebar.success("‚úÖ Adat bet√∂ltve")
    else:
        st.sidebar.info("üìÇ V√°rakoz√°s f√°jl felt√∂lt√©s√©re...")

    return df


def get_default_data(name):
    """Be√©p√≠tett alap√©rtelmezett adatok: XOR, Lorenz."""
    if name == "xor":
        return pd.DataFrame({
            "Input1": [0, 0, 1, 1],
            "Input2": [0, 1, 0, 1],
            "Target": [0, 1, 1, 0]
        })
    elif name == "lorenz":
        steps = 1000
        t = np.linspace(0, 40, steps)
        x = np.sin(t)
        y = np.cos(t)
        z = np.sin(0.5 * t)
        return pd.DataFrame({"x": x, "y": y, "z": z})
    else:
        st.warning(f"‚ö†Ô∏è Nincs ilyen nev≈± alap√©rtelmezett adat: `{name}`")
        return None


def show_data_overview(df, title="üìä Felt√∂lt√∂tt adat el≈ën√©zete"):
    """Adatok el≈ën√©zete: m√©ret, NaN figyelmeztet√©s."""
    if df is not None:
        st.subheader(title)
        st.write("‚ÑπÔ∏è M√©ret:", df.shape)
        st.dataframe(df.head())

        if df.isnull().values.any():
            st.warning("‚ö†Ô∏è Hi√°nyz√≥ √©rt√©kek tal√°lhat√≥k az adathalmazban!")
    else:
        st.info("üìÇ Nincs el√©rhet≈ë adat az el≈ën√©zethez.")


def run():
    """Men√ºb≈ël h√≠vhat√≥ √∂n√°ll√≥ oldal: Adatfelt√∂lt√©s."""
    st.title("üìÅ Adatfelt√∂lt√©s")
    st.markdown("""
    T√∂lts fel `.csv` f√°jlt, vagy haszn√°ld az el≈ëre defini√°lt alap√©rtelmezett adatk√©szleteket:  
    - `xor`: logikai XOR feladat  
    - `lorenz`: szimul√°lt 3D Lorenz-rendszer
    """)

    df = get_uploaded_data(allow_default=True, default="xor")
    if df is not None:
        show_data_overview(df)
    else:
        st.info("‚ùó Nincs el√©rhet≈ë adat.")
app = run

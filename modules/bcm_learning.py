import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt


def bcm_learning(x, eta=0.01, tau=100, w0=0.5, theta0=0.1, steps=500):
    w = w0
    theta = theta0
    w_hist, theta_hist, y_hist, dw_hist, dtheta_hist = [], [], [], [], []

    for t in range(steps):
        y = w * x[t]
        dw = eta * x[t] * y * (y - theta)
        dtheta = (y**2 - theta) / tau
        w += dw
        theta += dtheta
        w_hist.append(w)
        theta_hist.append(theta)
        y_hist.append(y)
        dw_hist.append(dw)
        dtheta_hist.append(dtheta)

    return np.array(w_hist), np.array(theta_hist), np.array(y_hist), np.array(dw_hist), np.array(dtheta_hist)


def generate_input_signal(kind, length, amplitude=1.0, noise_level=0.0):
    t = np.linspace(0, 10, length)
    if kind == "Szinusz":
        signal = amplitude * np.sin(2 * np.pi * t)
    elif kind == "FehÃ©r zaj":
        signal = np.random.randn(length)
    elif kind == "LÃ©pcsÅ‘s":
        signal = amplitude * np.where(t % 2 < 1, 1, 0)
    else:
        signal = np.zeros(length)
    noise = noise_level * np.random.randn(length)
    return signal + noise


def run():
    st.set_page_config(layout="wide")
    st.title("ğŸ§  BCM Learning â€“ AdaptÃ­v Szinaptikus TanulÃ¡s")

    st.markdown("""
Ez a modul a **BCM (Bienenstockâ€“Cooperâ€“Munro)** tanulÃ¡si szabÃ¡ly mÅ±kÃ¶dÃ©sÃ©t modellezi, amely sorÃ¡n a tanulÃ¡s kÃ¼szÃ¶bÃ©rtÃ©ke idÅ‘ben is alkalmazkodik.

A cÃ©l: bemeneti mintÃ¡k alapjÃ¡n **stabil Ã©s dinamikusan alkalmazkodÃ³** sÃºlyvÃ¡ltozÃ¡st tanulni.
    """)

    # BeÃ¡llÃ­tÃ¡sok
    signal_type = st.sidebar.selectbox("Bemeneti jel tÃ­pusa", ["Szinusz", "FehÃ©r zaj", "LÃ©pcsÅ‘s"])
    steps = st.sidebar.slider("SzimulÃ¡ciÃ³ lÃ©pÃ©sei", 100, 2000, 500, step=100)
    eta = st.sidebar.slider("TanulÃ¡si rÃ¡ta (Î·)", 0.001, 0.1, 0.01)
    tau = st.sidebar.slider("KÃ¼szÃ¶b idÅ‘Ã¡llandÃ³ (Ï„)", 10, 500, 100)
    w0 = st.sidebar.slider("Kezdeti sÃºly (wâ‚€)", -2.0, 2.0, 0.5)
    theta0 = st.sidebar.slider("Kezdeti kÃ¼szÃ¶b (Î¸â‚€)", 0.0, 1.0, 0.1)
    amplitude = st.sidebar.slider("Jel amplitÃºdÃ³", 0.1, 2.0, 1.0)
    noise_level = st.sidebar.slider("Zaj szint", 0.0, 1.0, 0.0)

    # SzimulÃ¡ciÃ³
    x = generate_input_signal(signal_type, steps, amplitude, noise_level)
    w, theta, y, dw, dtheta = bcm_learning(x, eta, tau, w0, theta0, steps)

    # Grafikon
    st.subheader("ğŸ“ˆ TanulÃ¡s idÅ‘fÃ¼ggvÃ©nyei")
    fig, ax = plt.subplots()
    ax.plot(w, label="SÃºly (w)")
    ax.plot(theta, label="KÃ¼szÃ¶b (Î¸)")
    ax.plot(y, label="Kimenet (y)")
    ax.set_title("BCM tanulÃ¡si dinamika")
    ax.set_xlabel("IdÅ‘lÃ©pÃ©sek")
    ax.legend()
    st.pyplot(fig)

    # Export
    st.subheader("ğŸ“¥ EredmÃ©nyek letÃ¶ltÃ©se")
    df = pd.DataFrame({
        "x": x,
        "y": y,
        "w": w,
        "Î¸": theta,
        "Î”w": dw,
        "Î”Î¸": dtheta
    })
    csv = df.to_csv(index_label="lÃ©pÃ©s").encode("utf-8")
    st.download_button("LetÃ¶ltÃ©s CSV-ben", data=csv, file_name="bcm_learning_full.csv")

    # TudomÃ¡nyos hÃ¡ttÃ©r
    st.markdown("### ğŸ“˜ TudomÃ¡nyos hÃ¡ttÃ©r")
    st.latex(r"""
    \frac{dw}{dt} = \eta \cdot x \cdot y \cdot (y - \theta)
    \quad
    \frac{d\theta}{dt} = \frac{1}{\tau} (y^2 - \theta)
    """)
    st.markdown("""
A **BCM szabÃ¡ly** lehetÅ‘vÃ© teszi, hogy a neuron *dinamikusan* alkalmazkodjon a tanulÃ¡s feltÃ©teleihez, nem csupÃ¡n a bemenet alapjÃ¡n.

- A sÃºly csak akkor nÅ‘, ha a kimenet meghaladja a kÃ¼szÃ¶bÃ¶t.
- A kÃ¼szÃ¶b Ã©rtÃ©ke is vÃ¡ltozik a kimenet fÃ¼ggvÃ©nyÃ©ben (homeosztÃ¡zis).
- A tanulÃ¡s stabil Ã©s Ã¶nszabÃ¡lyozÃ³ lesz â€“ ez teszi **biolÃ³giailag relevÃ¡nssÃ¡**.

**AlkalmazÃ¡s:** vizuÃ¡lis kÃ©reg modellezÃ©se, adaptÃ­v tanulÃ¡si rendszerek, szenzoros jelfeldolgozÃ¡s.
    """)

# ReflectAI kompatibilis
app = run

import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# BCM tanul√°si szab√°ly
def bcm_learning(x, eta=0.01, tau=100, w0=0.5, theta0=0.1, steps=500):
    w = w0
    theta = theta0
    w_hist, theta_hist, y_hist = [], [], []

    for t in range(steps):
        y = w * x[t]
        dw = eta * x[t] * y * (y - theta)
        dtheta = (y**2 - theta) / tau
        w += dw
        theta += dtheta
        w_hist.append(w)
        theta_hist.append(theta)
        y_hist.append(y)

    return np.array(w_hist), np.array(theta_hist), np.array(y_hist)

# Jelgener√°tor
def generate_input_signal(kind, length, amplitude=1.0, noise_level=0.0):
    t = np.linspace(0, 10, length)
    if kind == "Szinusz":
        signal = amplitude * np.sin(2 * np.pi * t)
    elif kind == "Feh√©r zaj":
        signal = np.random.randn(length)
    elif kind == "L√©pcs≈ës":
        signal = amplitude * np.where(t % 2 < 1, 1, 0)
    else:
        signal = np.zeros(length)
    noise = noise_level * np.random.randn(length)
    return signal + noise

# ‚úÖ A run() f√ºggv√©ny
def run():
    st.title("üß† BCM Learning ‚Äì Adapt√≠v Szinaptikus Tanul√°s")

    st.markdown("""
Ez a modul a **BCM (Bienenstock‚ÄìCooper‚ÄìMunro)** tanul√°si szab√°ly m≈±k√∂d√©s√©t szeml√©lteti, amely a szinaptikus m√≥dosul√°sokat egy dinamikusan v√°ltoz√≥ k√ºsz√∂b√∂n kereszt√ºl modellezi.
    """)

    # ‚öôÔ∏è Param√©terek
    signal_type = st.selectbox("Bemeneti jel t√≠pusa", ["Szinusz", "Feh√©r zaj", "L√©pcs≈ës"])
    steps = st.slider("Szimul√°ci√≥ l√©p√©sei", 100, 2000, 500, step=100)
    eta = st.slider("Tanul√°si r√°ta (Œ∑)", 0.001, 0.1, 0.01, step=0.001)
    tau = st.slider("K√ºsz√∂b id≈ë√°lland√≥ (œÑ)", 10, 500, 100, step=10)
    w0 = st.slider("Kezdeti s√∫ly (w‚ÇÄ)", -2.0, 2.0, 0.5, step=0.1)
    theta0 = st.slider("Kezdeti k√ºsz√∂b (Œ∏‚ÇÄ)", 0.0, 1.0, 0.1, step=0.05)
    amplitude = st.slider("Jel amplit√∫d√≥", 0.1, 2.0, 1.0, step=0.1)
    noise_level = st.slider("Zaj szint", 0.0, 1.0, 0.0, step=0.05)

    # üìä Szimul√°ci√≥
    x = generate_input_signal(signal_type, steps, amplitude, noise_level)
    w, theta, y = bcm_learning(x, eta, tau, w0, theta0, steps)

    # üìà 2D grafikon
    st.subheader("üìà Tanul√°si dinamika")
    fig, ax = plt.subplots()
    ax.plot(w, label="S√∫ly (w)")
    ax.plot(theta, label="K√ºsz√∂b (Œ∏)")
    ax.plot(y, label="Kimenet (y)")
    ax.set_xlabel("Id≈ë")
    ax.set_title("BCM tanul√°s id≈ëf√ºggv√©nyei")
    ax.legend()
    st.pyplot(fig)

    # üì• Export
    st.subheader("üì• Eredm√©nyek let√∂lt√©se")
    df = pd.DataFrame({"x": x, "y": y, "w": w, "Œ∏": theta})
    csv = df.to_csv(index_label="id≈ë").encode("utf-8")
    st.download_button("Let√∂lt√©s CSV-ben", data=csv, file_name="bcm_learning.csv")

    # üìò Tudom√°nyos h√°tt√©r
    st.markdown("""
### üìö Tudom√°nyos h√°tt√©r

A **BCM-szab√°ly** egy biol√≥giailag inspir√°lt tanul√°si elm√©let, mely szerint a szinaptikus er≈ë v√°ltoz√°sa az aktivit√°s √©s egy adapt√≠v k√ºsz√∂b f√ºggv√©nye:

- S√∫lyv√°ltoz√°s:  
  \( \frac{dw}{dt} = \eta \cdot x \cdot y \cdot (y - \theta) \)

- K√ºsz√∂bszint:  
  \( \frac{d\theta}{dt} = \frac{1}{\tau} (y^2 - \theta) \)

Ez biztos√≠tja a tanul√°si stabilit√°st, homeoszt√°zist √©s szelektivit√°st.

**Alkalmaz√°si ter√ºletek:**  
‚Äì Szenzoros tanul√°s, l√°t√°sfejl≈ëd√©s, adapt√≠v rendszerek.

**Interakt√≠van √°ll√≠that√≥ param√©terek:**  
‚Äì Kezdeti √©rt√©kek  
‚Äì Tanul√°si r√°ta  
‚Äì Bemeneti jel, amplit√∫d√≥, zaj  
‚Äì Id≈ë√°lland√≥
    """)

# ‚úÖ Modul regisztr√°l√°shoz:
app = run

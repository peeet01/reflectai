import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import plotly.graph_objects as go

# BCM tanul√°si szab√°ly
def bcm_learning(x, eta=0.01, tau=100, steps=500):
    w = 0.5
    theta = 0.1
    w_hist, theta_hist, y_hist = [], [], []

    for t in range(steps):
        y = w * x[t]
        dw = eta * x[t] * y * (y - theta)
        dtheta = (y**2 - theta) / tau
        w += dw
        theta += dtheta
        w_hist.append(w)
        theta_hist.append(theta)
        y_hist.append(y)

    return np.array(w_hist), np.array(theta_hist), np.array(y_hist)

# Bemeneti jel gener√°l√°sa
def generate_input_signal(kind, length):
    t = np.linspace(0, 10, length)
    if kind == "Szinusz":
        return np.sin(2 * np.pi * t)
    elif kind == "Feh√©r zaj":
        return np.random.randn(length)
    elif kind == "L√©pcs≈ës":
        return np.where(t % 2 < 1, 1, 0)
    else:
        return np.zeros(length)

# üîÅ √öj 3D neuronh√°l√≥ vizualiz√°ci√≥
def draw_3d_network(w, y, theta):
    np.random.seed(42)
    N = 10
    pos = np.random.normal(size=(N, 3))
    edges = [(i, j) for i in range(N) for j in range(i+1, N)]

    w_val = np.clip(w[-1], -2, 2)
    y_val = np.clip(y[-1], 0, 1)
    theta_val = np.clip(theta[-1], 0, 2)

    fig = go.Figure()

    for i, j in edges:
        weight_strength = abs(np.sin(w_val + i * 0.2 - j * 0.3))
        fig.add_trace(go.Scatter3d(
            x=[pos[i, 0], pos[j, 0]],
            y=[pos[i, 1], pos[j, 1]],
            z=[pos[i, 2], pos[j, 2]],
            mode="lines",
            line=dict(color=f"rgba(30,144,255,{0.2 + 0.8 * weight_strength:.2f})",
                      width=1 + 5 * weight_strength),
            hoverinfo='none',
            showlegend=False
        ))

    neuron_colors = 255 * np.clip((y_val + 0.5 * np.sin(np.arange(N))), 0, 1)
    neuron_sizes = 8 + 10 * np.abs(np.sin(y_val + np.linspace(0, 2*np.pi, N)))

    fig.add_trace(go.Scatter3d(
        x=pos[:, 0], y=pos[:, 1], z=pos[:, 2],
        mode="markers",
        marker=dict(size=neuron_sizes,
                    color=neuron_colors,
                    colorscale="Viridis",
                    opacity=0.9),
        text=[f"Neuron {i}<br>y: {y_val:.2f}<br>Œ∏: {theta_val:.2f}" for i in range(N)],
        hoverinfo='text',
        name="Neuronok"
    ))

    fig.update_layout(
        title="üß† 3D Neuronh√°l√≥ s√∫ly- √©s aktivit√°svizualiz√°ci√≥",
        margin=dict(l=0, r=0, b=0, t=40),
        scene=dict(xaxis=dict(visible=False),
                   yaxis=dict(visible=False),
                   zaxis=dict(visible=False))
    )
    return fig

# üîÅ Teljes app fut√°s
def run():
    st.title("üß† BCM Learning ‚Äì Adapt√≠v Szinaptikus Tanul√°s")

    st.markdown("""
Ez a modul a **BCM (Bienenstock‚ÄìCooper‚ÄìMunro)** tanul√°si szab√°ly m≈±k√∂d√©s√©t szeml√©lteti, amely a szinaptikus m√≥dosul√°sokat egy dinamikusan v√°ltoz√≥ k√ºsz√∂b√∂n kereszt√ºl modellezi.
    """)

    signal_type = st.selectbox("Bemeneti jel t√≠pusa", ["Szinusz", "Feh√©r zaj", "L√©pcs≈ës"])
    steps = st.slider("Szimul√°ci√≥ l√©p√©sei", 100, 2000, 500, step=100)
    eta = st.slider("Tanul√°si r√°ta (Œ∑)", 0.001, 0.1, 0.01, step=0.001)
    tau = st.slider("K√ºsz√∂b id≈ë√°lland√≥ (œÑ)", 10, 500, 100, step=10)

    x = generate_input_signal(signal_type, steps)
    w, theta, y = bcm_learning(x, eta, tau, steps)

    st.subheader("üìà Tanul√°si dinamika")
    fig, ax = plt.subplots()
    ax.plot(w, label="S√∫ly (w)")
    ax.plot(theta, label="K√ºsz√∂b (Œ∏)")
    ax.plot(y, label="Kimenet (y)")
    ax.set_xlabel("Id≈ë")
    ax.set_title("BCM s√∫lytanul√°s dinamik√°ja")
    ax.legend()
    st.pyplot(fig)

    st.subheader("üî¨ 3D neuronh√°l√≥ vizualiz√°ci√≥")
    st.plotly_chart(draw_3d_network(w, y, theta))

    st.subheader("üì• Eredm√©nyek let√∂lt√©se")
    df = pd.DataFrame({"w": w, "Œ∏": theta, "y": y, "x": x})
    csv = df.to_csv(index_label="id≈ë").encode("utf-8")
    st.download_button("Let√∂lt√©s CSV-ben", data=csv, file_name="bcm_learning.csv")

    st.markdown("""
### üìö Tudom√°nyos h√°tt√©r

A **BCM-szab√°ly** a szinaptikus plaszticit√°s egyik biol√≥giailag megalapozott modellje, amely egy **nemline√°ris aktivit√°sf√ºgg≈ë** tanul√°si k√ºsz√∂b√∂t (Œ∏) haszn√°l.

**Form√°lis le√≠r√°s:**

- S√∫lyv√°ltoz√°s:  
  \( \frac{dw}{dt} = \eta \cdot x \cdot y \cdot (y - \theta) \)

- K√ºsz√∂bszint v√°ltoz√°sa:  
  \( \frac{d\theta}{dt} = \frac{1}{\tau} (y^2 - \theta) \)

**Jelent≈ës√©g:**

- Homeosztatikus stabilit√°st biztos√≠t  
- Szelekt√≠v tanul√°st tesz lehet≈ëv√©  
- Biol√≥giailag relev√°ns: szenzoros plaszticit√°s, l√°t√°srendszer fejl≈ëd√©se stb.

**Haszn√°lat az appban:**

- Szinaptikus tanul√°s id≈ëbeli dinamik√°j√°nak vizsg√°lata  
- Vizualiz√°ci√≥ neur√°lis kapcsolatok er≈ës√∂d√©s√©r≈ël √©s gyeng√ºl√©s√©r≈ël  
- Interakt√≠v k√≠s√©rletez√©s elt√©r≈ë bemeneti jelekkel
    """)

# ‚òëÔ∏è Ez kell a bet√∂lt√©shez ReflectAI appban
app = run

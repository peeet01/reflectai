import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm
import plotly.graph_objects as go
import io
import base64

# üî¨ Mandelbrot frakt√°l sz√°m√≠t√°s
def mandelbrot_set(width, height, zoom, x_center, y_center, max_iter):
    x_range = 3.5 / zoom
    y_range = 2.0 / zoom
    x = np.linspace(x_center - x_range / 2, x_center + x_range / 2, width)
    y = np.linspace(y_center - y_range / 2, y_center + y_range / 2, height)
    X, Y = np.meshgrid(x, y)
    C = X + 1j * Y
    Z = np.zeros_like(C)
    div_time = np.zeros(C.shape, dtype=int)

    for i in range(max_iter):
        Z = Z**2 + C
        diverge = np.abs(Z) > 2
        div_now = diverge & (div_time == 0)
        div_time[div_now] = i
        Z[diverge] = 2

    return X, Y, div_time

# üíæ K√©p ment√©se linkk√©
def get_image_download_link(fig, filename='mandelbrot.png'):
    buf = io.BytesIO()
    fig.savefig(buf, format="png", bbox_inches='tight', pad_inches=0)
    buf.seek(0)
    b64 = base64.b64encode(buf.read()).decode()
    href = f'<a href="data:file/png;base64,{b64}" download="{filename}">üì• K√©p let√∂lt√©se</a>'
    return href

# üöÄ F≈ë modul futtat√°sa
def run():
    st.title("üåÄ Mandelbrot Frakt√°lvizualiz√°ci√≥")

    st.markdown("""
A Mandelbrot-halmaz az egyik legismertebb frakt√°l, amely a komplex sz√°mok s√≠kj√°n j√∂n l√©tre,  
√∂nhasonl√≥ mint√°zatokkal √©s v√©gtelen komplexit√°ssal.

Ez a modul lehet≈ëv√© teszi a Mandelbrot-halmaz felfedez√©s√©t 2D √©s interakt√≠v 3D form√°ban,  
valamint k√ºl√∂nb√∂z≈ë param√©terek vizsg√°lat√°t.
""")

    st.subheader("üîß Param√©terek")

    col1, col2 = st.columns(2)
    with col1:
        zoom = st.slider("Zoom", 1.0, 100.0, 1.0, step=0.5)
        x_center = st.slider("X k√∂z√©ppont", -2.0, 2.0, -0.5, step=0.01)
        y_center = st.slider("Y k√∂z√©ppont", -2.0, 2.0, 0.0, step=0.01)
    with col2:
        max_iter = st.slider("Iter√°ci√≥k sz√°ma", 50, 1000, 200, step=50)
        width = st.slider("Sz√©less√©g (px)", 300, 800, 600, step=100)
        height = st.slider("Magass√°g (px)", 300, 800, 400, step=100)
        show_3d = st.checkbox("üåê Interakt√≠v 3D n√©zet (Plotly)")

    if st.button("üîÅ Alap√©rtelmezett n√©zet"):
        zoom = 1.0
        x_center = -0.5
        y_center = 0.0

    st.info("üîÑ Frakt√°l gener√°l√°sa folyamatban...")
    X, Y, Z = mandelbrot_set(width, height, zoom, x_center, y_center, max_iter)

    if show_3d:
        st.subheader("üåê Interakt√≠v 3D Mandelbrot-halmaz")
        fig = go.Figure(data=[go.Surface(z=Z, x=X, y=Y, colorscale='Inferno')])
        fig.update_layout(
            scene=dict(
                xaxis_title="Re(z)",
                yaxis_title="Im(z)",
                zaxis_title="Iter√°ci√≥k",
            ),
            margin=dict(l=0, r=0, t=30, b=0)
        )
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.subheader("üñºÔ∏è K√©p (2D)")
        fig, ax = plt.subplots()
        ax.imshow(Z, cmap="inferno", extent=[X.min(), X.max(), Y.min(), Y.max()])
        ax.set_title("Mandelbrot-halmaz (2D)")
        ax.axis("off")
        st.pyplot(fig)
        st.markdown(get_image_download_link(fig), unsafe_allow_html=True)

    st.subheader("üìö Tudom√°nyos h√°tt√©r")

    st.latex(r"Z_{n+1} = Z_n^2 + C")

    st.markdown("""
A **Mandelbrot-halmaz** azon komplex sz√°mok gy≈±jtem√©nye, amelyekre a k√∂vetkez≈ë iterat√≠v k√©plet:

$$
Z_{n+1} = Z_n^2 + C
$$

nem divergens, azaz a sorozat tagjai nem tartanak a v√©gtelenhez.  
Egy adott \( C \in \mathbb{C} \) sz√°m akkor r√©sze a Mandelbrot-halmaznak, ha a sorozat \( |Z_n| \le 2 \) marad v√©gtelen sok iter√°ci√≥ ut√°n is.

#### Jellemz≈ëk:
- V√©gtelen r√©szletess√©g
- √ñnmag√°ba √°gyazott mint√°zatok (√∂nhasonl√≥s√°g)
- Frakt√°l dimenzi√≥ja meghaladja a 2-t

A Mandelbrot-halmaz minden pontja egyfajta **stabilit√°si teszt** eredm√©nye, amely a komplex sz√°mokat a kaotikuss√°g szempontj√°b√≥l oszt√°lyozza.
""")

# K√∂telez≈ë ReflectAI-kompatibilit√°s
app = run

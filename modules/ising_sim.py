import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import plotly.graph_objects as go

# üß≤ Ising-modell inicializ√°l√°sa
def init_lattice(N):
    return np.random.choice([-1, 1], size=(N, N))

# üîÅ Egy MC-l√©p√©s
def ising_step(lattice, beta, J=1.0):
    """
    Egyetlen Metropolis-l√©p√©s az Ising-modellben.
    ŒîE = 2 J s_{i,j} * (szomsz√©d√∂sszeg)
    """
    N = lattice.shape[0]
    for _ in range(N * N):
        i = np.random.randint(0, N)
        j = np.random.randint(0, N)
        spin = lattice[i, j]
        neighbors = (
            lattice[(i+1) % N, j] +
            lattice[i, (j+1) % N] +
            lattice[(i-1) % N, j] +
            lattice[i, (j-1) % N]
        )
        delta_E = 2 * J * spin * neighbors
        if delta_E < 0 or np.random.rand() < np.exp(-beta * delta_E):
            lattice[i, j] *= -1
    return lattice

# üßÆ Energia √©s m√°gnesezetts√©g
def calculate_observables(lattice, J=1.0):
    """
    Energia- √©s m√°gnesezetts√©g-s≈±r≈±s√©g sz√°m√≠t√°sa.
    Csak jobbra √©s lefel√© sz√°molunk, hogy ne legyen dupla sz√°mol√°s.
    """
    N = lattice.shape[0]
    E, M = 0.0, np.sum(lattice)
    for i in range(N):
        for j in range(N):
            spin = lattice[i, j]
            neighbors = lattice[(i+1) % N, j] + lattice[i, (j+1) % N]
            E -= J * spin * neighbors
    # energias≈±r≈±s√©g, m√°gnesezetts√©g-s≈±r≈±s√©g
    return E / (N * N), M / (N * N)

# üå°Ô∏è Szimul√°ci√≥
def simulate_ising(N, beta, steps, J=1.0):
    lattice = init_lattice(N)
    energies = []
    magnetizations = []
    snapshots = []

    for step in range(steps):
        lattice = ising_step(lattice, beta, J=J)
        E, M = calculate_observables(lattice, J=J)
        energies.append(E)
        magnetizations.append(M)
        if step % (steps // 5) == 0:
            snapshots.append(np.copy(lattice))
    return lattice, energies, magnetizations, snapshots

# üìà Vizualiz√°ci√≥k
def plot_observables(energies, magnetizations):
    fig, ax = plt.subplots(2, 1, figsize=(8, 6))
    ax[0].plot(energies, label='Energia')
    ax[0].set_ylabel("E / N¬≤")
    ax[0].set_title("Energia alakul√°sa")
    ax[0].grid(True)

    ax[1].plot(magnetizations, label='M√°gnesezetts√©g', color='orange')
    ax[1].set_ylabel("M / N¬≤")
    ax[1].set_title("M√°gnesezetts√©g alakul√°sa")
    ax[1].set_xlabel("L√©p√©sek")
    ax[1].grid(True)

    st.pyplot(fig)

def plot_3d_lattice(lattice):
    x, y = np.meshgrid(np.arange(lattice.shape[0]), np.arange(lattice.shape[1]))
    fig = go.Figure(data=[go.Surface(z=lattice, x=x, y=y, colorscale='RdBu', showscale=False)])
    fig.update_layout(
        title="3D Spin konfigur√°ci√≥",
        scene=dict(zaxis_title='Spin', xaxis_title='X', yaxis_title='Y'),
        margin=dict(l=10, r=10, b=10, t=40)
    )
    st.plotly_chart(fig, use_container_width=True)

# üöÄ Streamlit app
def run():
    st.set_page_config(layout="wide")
    st.title("üß≤ Ising-modell szimul√°ci√≥ ‚Äì 2D r√°cson")

    st.markdown("""
Ez a modul a klasszikus **2D Ising-modell** viselked√©s√©t szimul√°lja √©s vizualiz√°lja k√ºl√∂nb√∂z≈ë h≈ëm√©rs√©kleteken.  
Felt√°rhat√≥ a **m√°gnesezetts√©gi √°tmenet**, a **kritikus viselked√©s** √©s a **spintext√∫r√°k** kialakul√°sa.
""")

    st.sidebar.header("üß™ Param√©terek")
    N = st.sidebar.slider("R√°cs m√©rete (NxN)", 10, 100, 30)
    beta = st.sidebar.slider("Inverz h≈ëm√©rs√©klet (Œ≤)", 0.1, 1.0, 0.4, 0.01)
    J = st.sidebar.slider("Csatol√°si √°lland√≥ (J)", 0.1, 2.0, 1.0, 0.1)
    steps = st.sidebar.slider("MC-l√©p√©sek sz√°ma", 100, 5000, 1000, step=100)

    if st.button("‚ñ∂Ô∏è Szimul√°ci√≥ ind√≠t√°sa"):
        st.info("‚è≥ Szimul√°ci√≥ fut...")
        lattice, E, M, snapshots = simulate_ising(N, beta, steps, J=J)
        st.success("‚úÖ K√©sz!")

        st.subheader("üìâ Energetikai √©s m√°gneses lefut√°s")
        plot_observables(E, M)

        st.subheader("üåê Z√°r√≥ spin√°llapot ‚Äì 3D")
        plot_3d_lattice(lattice)

        st.subheader("üßä Snapshot-ok 2D-ben")
        cols = st.columns(len(snapshots))
        for i, snap in enumerate(snapshots):
            fig, ax = plt.subplots()
            ax.imshow(snap, cmap='coolwarm')
            ax.set_title(f"L√©p√©s {int((i+1)*(steps/5))}")
            ax.axis('off')
            cols[i].pyplot(fig)

        st.subheader("üì• CSV export")
        df = pd.DataFrame({"step": list(range(steps)), "energy_density": E, "magnetization_density": M})
        csv = df.to_csv(index=False).encode("utf-8")
        st.download_button("Let√∂lt√©s CSV-ben", data=csv, file_name="ising_observables.csv")

        st.markdown("---")
        st.subheader("üìò Tudom√°nyos h√°tt√©r")

        st.markdown(r"""
A **2D Ising-modell** egy egyszer≈±, de m√©ly fizikai jelent√©ssel b√≠r√≥ r√°csmodell, amely bin√°ris spinekb≈ël √°ll ($s_{i,j} = \pm 1$).  
A rendszer Hamilton-f√ºggv√©nye:

$$
H = -J \sum_{\langle i,j \rangle} s_i s_j
$$

- $J$: csatol√°si √°lland√≥ (pozit√≠v ‚Äì ferrom√°gneses)
- $s_i$: az $i$-edik spin √©rt√©ke
- $\langle i,j \rangle$: szomsz√©dos spinp√°rok

A szimul√°ci√≥ **Metropolis-algoritmust** haszn√°l a h≈ëm√©rs√©klet szerinti eloszl√°s k√∂zel√≠t√©s√©re.  
A **m√°gnesezetts√©g-s≈±r≈±s√©g**:

$$
m = \frac{1}{N^2} \sum_{i,j} s_{i,j}
$$

Az **energia-s≈±r≈±s√©g**:

$$
e = -\frac{J}{N^2} \sum_{\langle i,j \rangle} s_i s_j
$$

### üî• F√°zis√°tmenet

- Alacsony h≈ëm√©rs√©kleten a spinek **rendezetten** √°llnak be (magas $|m|$)
- Magas h≈ëm√©rs√©kleten **kaotikus** √°llapot alakul ki (kis $|m|$)
- Kritikus pont: $T_c \approx 2.27$ (vagy $\beta_c \approx 0.44$ ha $J=1$)

Ez az egyszer≈± modell k√©pes le√≠rni **f√°zis√°tmeneteket, kritikus viselked√©st √©s rendezetts√©gi dinamika** kialakul√°s√°t.
        """)

# ReflectAI-kompatibilit√°s
app = run

import streamlit as st
import numpy as np
import networkx as nx
import plotly.graph_objects as go
import pandas as pd

# --- Kuramoto l√©p√©s ---
def kuramoto_step(theta, K, A, omega, dt):
    N = len(theta)
    dtheta = omega + (K / N) * np.sum(A * np.sin(theta[:, None] - theta), axis=1)
    return theta + dt * dtheta

# --- Szinkroniz√°ci√≥s index ---
def compute_order_parameter(theta):
    return np.abs(np.mean(np.exp(1j * theta)))

# --- H√°l√≥zat gener√°l√°s ---
def generate_graph(N, graph_type, p=0.3, k=4, m=2):
    if graph_type == "Teljes":
        return nx.complete_graph(N)
    elif graph_type == "V√©letlen (Erd≈ës‚ÄìR√©nyi)":
        return nx.erdos_renyi_graph(N, p=p, seed=42)
    elif graph_type == "Kis vil√°g (Watts‚ÄìStrogatz)":
        k = max(2, min(k, N-1))
        if k % 2 == 1:  # WS: a gy≈±r≈±n √°ltal√°ban p√°ros k a kerek szomsz√©ds√°ghoz
            k += 1
        return nx.watts_strogatz_graph(N, k=k, p=p, seed=42)
    elif graph_type == "Sk√°laf√ºggetlen (Barab√°si‚ÄìAlbert)":
        m = max(1, min(m, N-1))
        return nx.barabasi_albert_graph(N, m=m, seed=42)
    else:
        return nx.complete_graph(N)

# --- 3D gr√°f kirajzol√°s ---
def plot_graph_3d(G, theta, palette, layout_type="Spring (h√°l√≥zati kutat√°s ‚Äì alap√©rtelmezett)"):
    # Elrendez√©s kiv√°laszt√°sa
    if layout_type.startswith("Spring"):
        pos = nx.spring_layout(G, dim=3, seed=42)  # 3D er≈ë-alap√∫, h√°l√≥zatkutat√°sban bevett
        node_xyz = np.array([pos[n] for n in G.nodes()])
    else:
        # K√∂r elrendez√©s (klasszikus tank√∂nyvi √°bra): 2D -> 3D (z=0)
        pos2d = nx.circular_layout(G)
        node_xy = np.array([pos2d[n] for n in G.nodes()])
        zeros = np.zeros((node_xy.shape[0], 1))
        node_xyz = np.hstack([node_xy, zeros])

    # √âlek koordin√°t√°i
    edge_x, edge_y, edge_z = [], [], []
    for u, v in G.edges():
        x0, y0, z0 = node_xyz[u]
        x1, y1, z1 = node_xyz[v]
        edge_x += [x0, x1, None]
        edge_y += [y0, y1, None]
        edge_z += [z0, z1, None]

    # F√°zist 0..2œÄ k√∂z√© tekerj√ºk vizualiz√°ci√≥hoz
    theta_wrapped = (theta % (2*np.pi))

    fig = go.Figure()
    fig.add_trace(go.Scatter3d(
        x=edge_x, y=edge_y, z=edge_z,
        mode="lines",
        line=dict(color="lightgray", width=1),
        opacity=0.35,
        name="K√∂t√©sek"
    ))
    fig.add_trace(go.Scatter3d(
        x=node_xyz[:, 0], y=node_xyz[:, 1], z=node_xyz[:, 2],
        mode="markers",
        marker=dict(
            size=7,
            color=theta_wrapped,
            colorscale=palette,
            opacity=0.9,
            line=dict(color="black", width=0.5)
        ),
        name="Oszcill√°torok"
    ))
    fig.update_layout(
        scene=dict(
            xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
            yaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
            zaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
        ),
        margin=dict(l=0, r=0, b=0, t=32),
        height=600
    )
    st.plotly_chart(fig, use_container_width=True)

# --- App ---
def run():
    st.set_page_config(layout="wide")
    st.title("üß† Kuramoto Szinkroniz√°ci√≥ ‚Äì Dinamikus Oszcill√°tor Modell")

    st.markdown(
        "A **Kuramoto-modell** t√∂bb oszcill√°tor f√°zis√°nak szinkroniz√°ci√≥j√°t √≠rja le h√°l√≥zatokon."
    )

    # Oldals√°v ‚Äì param√©terek
    st.sidebar.header("‚öôÔ∏è Szimul√°ci√≥s param√©terek")
    N = st.sidebar.slider("Oszcill√°torok sz√°ma (N)", 5, 200, 50, step=1)
    graph_type = st.sidebar.selectbox(
        "H√°l√≥zat t√≠pusa",
        ["Teljes", "V√©letlen (Erd≈ës‚ÄìR√©nyi)", "Kis vil√°g (Watts‚ÄìStrogatz)", "Sk√°laf√ºggetlen (Barab√°si‚ÄìAlbert)"]
    )

    # Topol√≥gia-specifikus be√°ll√≠t√°sok
    p = 0.3; k = 4; m = 2
    if graph_type in ["V√©letlen (Erd≈ës‚ÄìR√©nyi)", "Kis vil√°g (Watts‚ÄìStrogatz)"]:
        p = st.sidebar.slider("Rewire/√©l val√≥sz√≠n≈±s√©ge (p)", 0.0, 1.0, 0.3, 0.01)
    if graph_type == "Kis vil√°g (Watts‚ÄìStrogatz)":
        k = st.sidebar.slider("Gy≈±r≈±-szomsz√©dok sz√°ma (k)", 2, min(20, N-1), 4, step=1)
    if graph_type == "Sk√°laf√ºggetlen (Barab√°si‚ÄìAlbert)":
        m = st.sidebar.slider("√öj csom√≥pont √©lsz√°ma (m)", 1, min(10, N-1), 2, step=1)

    K = st.sidebar.slider("Kapcsol√≥d√°si er≈ëss√©g (K)", 0.0, 10.0, 2.0, 0.1)
    steps = st.sidebar.slider("Iter√°ci√≥k sz√°ma", 100, 5000, 1000, 100)
    dt = st.sidebar.slider("Id≈ël√©p√©s (dt)", 0.005, 0.2, 0.05, 0.005)
    palette = st.sidebar.selectbox("Sz√≠ns√©ma (3D)", ["Turbo", "Viridis", "Electric", "Hot", "Rainbow"])

    # üëá √öJ: Elrendez√©s-v√°laszt√≥ + magyar√°zat kapcsol√≥
    layout_type = st.sidebar.selectbox(
        "Vizualiz√°ci√≥s elrendez√©s",
        ["Spring (h√°l√≥zati kutat√°s ‚Äì alap√©rtelmezett)", "K√∂r (klasszikus tank√∂nyvi)"]
    )
    show_disclaimer = st.sidebar.checkbox("Magyar√°z√≥ sz√∂veg megjelen√≠t√©se a grafikon felett", value=True)

    # Szimul√°ci√≥
    np.random.seed(42)
    theta = np.random.uniform(0, 2*np.pi, N)
    # frekvenci√°k: zero-mean, sk√°l√°zhat√≥ sz√≥r√°s
    omega_sigma = st.sidebar.slider("Saj√°tfrekvencia sz√≥r√°s (œÉ_œâ)", 0.0, 2.0, 1.0, 0.1)
    omega = np.random.normal(loc=0.0, scale=omega_sigma, size=N)

    G = generate_graph(N, graph_type, p=p, k=k, m=m)
    A = nx.to_numpy_array(G)

    order_params = []
    for _ in range(steps):
        theta = kuramoto_step(theta, K, A, omega, dt)
        order_params.append(compute_order_parameter(theta))

    # Kritikus K becsl√©s (all-to-all, norm√°lis œâ felt√©telez√©s)
    # g(0) = 1/(sqrt(2œÄ) * œÉ), Kc ‚âà 2/(œÄ*g(0)) = 2*sqrt(2œÄ)*œÉ/œÄ
    if omega_sigma > 0:
        Kc_est = 2*np.sqrt(2*np.pi)*omega_sigma/np.pi
        tip = "felette" if K >= Kc_est else "alatta"
        st.info(f"Elm√©leti K_c (all-to-all k√∂zel√≠t√©s): ~ **{Kc_est:.2f}** ‚Äì a v√°lasztott K **{tip}** van.")
    else:
        st.info("œâ sz√≥r√°sa 0 ‚Äì ide√°lis esetben m√°r kis K mellett is szinkroniz√°ci√≥ v√°rhat√≥.")

    # 2D R(t)
    st.subheader("üìà Szinkroniz√°ci√≥s index R(t)")
    st.line_chart(order_params)

    # üí¨ Magyar√°z√≥ sz√∂veg az elrendez√©shez (disclaimer)
    if show_disclaimer:
        if layout_type.startswith("Spring"):
            st.markdown(
                "> *A csom√≥pontok 3D **er≈ë-alap√∫ elrendez√©sben** l√°that√≥k. H√°l√≥zatkutat√°sban ezt haszn√°ljuk, "
                "mert a **gr√°f szerkezete** a l√©nyeges, nem a geometriai k√∂rpoz√≠ci√≥.*"
            )
        else:
            st.markdown(
                "> *Klasszikus **k√∂r elrendez√©s**: didaktikus, tank√∂nyvi n√©zet. A dinamika ugyanaz, "
                "csak a megjelen√≠t√©s v√°ltozik.*"
            )

    # 3D h√°l√≥zat
    st.subheader("üåê 3D vizualiz√°ci√≥ ‚Äì Oszcill√°tor f√°zisok sz√≠nk√≥ddal")
    plot_graph_3d(G, theta, palette, layout_type=layout_type)

    # Tudom√°nyos h√°tt√©r
    st.markdown("### üìò Tudom√°nyos h√°tt√©r")
    st.latex(r"\frac{d\theta_i}{dt}=\omega_i+\frac{K}{N}\sum_{j=1}^N A_{ij}\sin(\theta_j-\theta_i)")
    st.markdown(
        "- **$\\theta_i$**: az *i*-edik oszcill√°tor f√°zisa  \n"
        "- **$\\omega_i$**: saj√°tfrekvencia  \n"
        "- **$A_{ij}$**: szomsz√©ds√°gi m√°trix  \n"
        "- **$K$**: glob√°lis kapcsol√≥d√°si er≈ëss√©g  \n"
        "Az **order parameter** ($R$):"
    )
    st.latex(r"R(t)=\left|\frac{1}{N}\sum_{j=1}^N e^{i\theta_j(t)}\right|")

    # Export
    df_export = pd.DataFrame({"Id≈ël√©p√©s": np.arange(1, steps+1), "Szinkroniz√°ci√≥ (R)": order_params})
    st.subheader("üíæ Szinkroniz√°ci√≥s adatok let√∂lt√©se")
    st.download_button("‚¨áÔ∏è CSV let√∂lt√©se", df_export.to_csv(index=False).encode("utf-8"),
                       "kuramoto_sync.csv", "text/csv")

    st.subheader("üìù Megfigyel√©sek √©s jegyzetek")
    st.text_area("Mit tapasztalt√°l a szinkroniz√°ci√≥ sor√°n?", placeholder="√çrd ide...")

# ReflectAI kompat
app = run

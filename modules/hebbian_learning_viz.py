import streamlit as st
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
from io import StringIO

def hebbian_learning(x, y):
    return y @ x.T

def run():
    st.title("üß† Hebbian Tanul√°s Vizualiz√°ci√≥")

    st.markdown("""
    A **Hebbian tanul√°s** alapelve:
    > *"Neurons that fire together, wire together."*  
    Ez a modul szeml√©lteti a tanult s√∫lym√°trixot √©s a tanul√°s hat√°s√°t k√ºl√∂nb√∂z≈ë bemenetekre.
    """)

    st.subheader("üìÇ Bemenet forr√°sa")
    use_csv = st.checkbox("üì• CSV f√°jl felt√∂lt√©se X √©s Y m√°trixokhoz")

    if use_csv:
        uploaded_x = st.file_uploader("T√∂ltsd fel az X m√°trixot (bemenet)", type=["csv"])
        uploaded_y = st.file_uploader("T√∂ltsd fel az Y m√°trixot (kimenet)", type=["csv"])

        if uploaded_x and uploaded_y:
            x = pd.read_csv(uploaded_x, header=None).to_numpy()
            y = pd.read_csv(uploaded_y, header=None).to_numpy()
        else:
            st.warning("üìÑ K√©rlek, t√∂lts fel mindk√©t m√°trixot.")
            return
    else:
        input_neurons = st.slider("üî¢ Bemeneti neuronok sz√°ma", 2, 10, 3)
        output_neurons = st.slider("üî¢ Kimeneti neuronok sz√°ma", 2, 10, 2)
        patterns = st.slider("üìä Mint√°k sz√°ma", 3, 20, 5)
        x = np.random.randint(0, 2, (input_neurons, patterns))
        y = np.random.randint(0, 2, (output_neurons, patterns))

    # Tanul√°s
    w = hebbian_learning(x, y)
    y_pred = w @ x

    # Vizualiz√°ci√≥ ‚Äì s√∫lym√°trix
    st.subheader("üìò S√∫lym√°trix $W = Y \\cdot X^T$")
    fig1, ax1 = plt.subplots()
    sns.heatmap(w, annot=True, cmap='coolwarm', ax=ax1)
    ax1.set_xlabel("Bemeneti neuronok")
    ax1.set_ylabel("Kimeneti neuronok")
    st.pyplot(fig1)

    # Vizualiz√°ci√≥ ‚Äì j√≥solt kimenet
    st.subheader("üîÅ J√≥solt kimenet: $Y_{pred} = W \\cdot X$")
    fig2, ax2 = plt.subplots()
    sns.heatmap(y_pred, annot=True, cmap='YlGnBu', ax=ax2)
    ax2.set_xlabel("Mint√°k")
    ax2.set_ylabel("Kimeneti neuronok (j√≥solt)")
    st.pyplot(fig2)

    with st.expander("üìä M√°trixok r√©szletesen"):
        st.write("üß© Bemeneti m√°trix (X):")
        st.dataframe(x)
        st.write("üéØ C√©lm√°trix (Y):")
        st.dataframe(y)
        st.write("üß† Tanult s√∫lym√°trix (W):")
        st.dataframe(w)
        st.write("üì§ J√≥solt kimenet (Y_pred):")
        st.dataframe(y_pred)

    st.subheader("üíæ Export√°l√°s")
    df_w = pd.DataFrame(w)
    df_pred = pd.DataFrame(y_pred)
    csv_w = df_w.to_csv(index=False, header=False).encode("utf-8")
    csv_pred = df_pred.to_csv(index=False, header=False).encode("utf-8")

    st.download_button("‚¨áÔ∏è S√∫lym√°trix let√∂lt√©se (W)", data=csv_w, file_name="hebbian_weights.csv")
    st.download_button("‚¨áÔ∏è J√≥solt kimenet let√∂lt√©se (Y_pred)", data=csv_pred, file_name="hebbian_output.csv")

    with st.expander("üìò Tudom√°nyos h√°tt√©r ‚Äì Mi az a Hebbian tanul√°s?"):
    st.markdown("""
    A **Hebbian tanul√°s** az egyik legegyszer≈±bb √©s legismertebb szab√°ly az idegh√°l√≥zatok tan√≠t√°s√°ra.

    ### üß† Alapelv:
    > *‚ÄûNeurons that fire together, wire together.‚Äù*  
    Azaz: ha k√©t neuron egyszerre aktiv√°l√≥dik, akkor meger≈ës√∂dik k√∂zt√ºk a kapcsolat.

    ### üßÆ Matematikai modell:
    A s√∫lym√°trix kisz√°m√≠t√°sa:
\[
    W = Y \cdot X^T
\]
    - **X**: bemeneti neuronok aktivit√°sa (bemenet √ó mint√°k m√°trix)
    - **Y**: kimeneti neuronok v√°lasza (kimenet √ó mint√°k m√°trix)
    - **W**: tanult s√∫lym√°trix (kimenet √ó bemenet)

    A modell nem haszn√°l tanul√°si r√°t√°t, mivel ez egy egyszeri, line√°ris tanul√°si szab√°ly.

    ### üîç Alkalmaz√°s:
    - Biol√≥giai szinapszisok modellez√©se
    - Egyszer≈± asszociat√≠v mem√≥ria rendszerek
    - Hoppfield h√°l√≥k alapelve
    - Adapt√≠v sz≈±r≈ëk √©s korai g√©pi tanul√°sos modellek

    A Hebbian tanul√°s j√≥l haszn√°lhat√≥ oktat√°si c√©lra, mivel intuit√≠v √©s j√≥l szeml√©ltethet≈ë.
    """)
    
# K√∂telez≈ë ReflectAI-kompatibilit√°s
app = run

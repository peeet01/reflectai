def run():
    st.title("üìà Echo State Network (ESN) predikci√≥")

    st.markdown("""
    Ez a modul bemutatja, hogyan lehet Echo State Network-√∂t alkalmazni Lorenz-rendszer el≈ërejelz√©s√©re **vagy saj√°t felt√∂lt√∂tt adatokon val√≥ tanul√°sra**.
    A felt√∂lt√∂tt adatnak legal√°bb 3 oszlopos id≈ësornak kell lennie (pl. x, y, z).
    """)

    steps = st.slider("Adatpontok sz√°ma", 500, 3000, 1000)
    train_fraction = st.slider("Tan√≠t√°si ar√°ny", 0.1, 0.9, 0.5)
    reservoir_size = st.slider("Reservoir m√©ret", 50, 500, 100)

    # ‚úÖ Session-alap√∫ adatkezel√©s
    if "uploaded_df" not in st.session_state:
        st.session_state["uploaded_df"] = get_uploaded_data()
    uploaded_df = st.session_state["uploaded_df"]

    use_uploaded = False

    if uploaded_df is not None:
        if uploaded_df.shape[1] >= 3:
            st.success("‚úÖ Felt√∂lt√∂tt adat sikeresen bet√∂ltve.")
            show_data_overview(uploaded_df)
            data = uploaded_df.iloc[:steps, :3].values
            use_uploaded = True
        else:
            st.warning("‚ö†Ô∏è A felt√∂lt√∂tt adatnak legal√°bb 3 oszloposnak kell lennie (pl. x, y, z).")

    if not use_uploaded:
        st.info("‚ÑπÔ∏è Lorenz-szimul√°ci√≥s adat ker√ºl felhaszn√°l√°sra.")
        xs, ys, zs = generate_lorenz_data(steps)
        data = np.column_stack([xs, ys, zs])

    # üåä Tan√≠t√≥ √©s c√©l adatok el≈ëk√©sz√≠t√©se
    X = data[:-1]
    y = data[1:, 0]  # Csak az x komponens predikci√≥ja

    split = int(train_fraction * len(X))
    X_train, X_test = X[:split], X[split:]
    y_train, y_test = y[:split], y[split:]

    esn = EchoStateNetwork(n_inputs=3, n_reservoir=reservoir_size)
    esn.fit(X_train, y_train)
    prediction = esn.predict(X_test)

    # üìà Eredm√©ny √°bra
    fig, ax = plt.subplots()
    ax.plot(range(len(y_test)), y_test, label="Val√≥s X")
    ax.plot(range(len(prediction)), prediction, label="Predikci√≥", linestyle="--")
    ax.set_title("ESN el≈ërejelz√©s Lorenz-rendszerre")
    ax.set_xlabel("Id≈ël√©p√©sek")
    ax.set_ylabel("X √©rt√©k")
    ax.legend()
    st.pyplot(fig)

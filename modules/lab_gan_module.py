import streamlit as st
import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, transforms
from torch.utils.data import DataLoader
from torchvision.utils import make_grid, save_image
import matplotlib.pyplot as plt
import pandas as pd
import plotly.express as px
import io

# Generator
class Generator(nn.Module):
    def __init__(self, z_dim=100, img_dim=28*28):
        super().__init__()
        self.model = nn.Sequential(
            nn.Linear(z_dim, 128),
            nn.ReLU(),
            nn.Linear(128, img_dim),
            nn.Tanh()
        )
    def forward(self, x):
        return self.model(x)

# Discriminator
class Discriminator(nn.Module):
    def __init__(self, img_dim=28*28):
        super().__init__()
        self.model = nn.Sequential(
            nn.Linear(img_dim, 128),
            nn.LeakyReLU(0.2),
            nn.Linear(128, 1),
            nn.Sigmoid()
        )
    def forward(self, x):
        return self.model(x)

@st.cache_data
def load_data(batch_size):
    transform = transforms.Compose([
        transforms.ToTensor(),
        transforms.Normalize((0.5,), (0.5,))
    ])
    dataset = datasets.MNIST(root="./data", train=True, download=True, transform=transform)
    return DataLoader(dataset, batch_size=batch_size, shuffle=True)

def show_images(generator, z_dim, device):
    generator.eval()
    with torch.no_grad():
        z = torch.randn(16, z_dim).to(device)
        fake_imgs = generator(z).view(-1, 1, 28, 28).cpu()
        grid = make_grid(fake_imgs, nrow=4, normalize=True)
        fig, ax = plt.subplots()
        ax.imshow(grid.permute(1, 2, 0))
        ax.axis("off")
        st.pyplot(fig)
        buffer = io.BytesIO()
        save_image(fake_imgs, buffer, format='png')
        st.download_button("‚¨áÔ∏è Mint√°k let√∂lt√©se (PNG)", data=buffer.getvalue(), file_name="samples.png", mime="image/png")

def run():
    st.set_page_config(layout="wide")
    st.title("üß™ GAN ‚Äì Generative Adversarial Network")

    st.markdown(r"""
A **Generative Adversarial Network (GAN)** k√©t h√°l√≥zat verseny√©re √©p√ºl:  
- **Gener√°tor** √∫j mint√°kat √°ll√≠t el≈ë,  
- **Diszkrimin√°tor** pedig megpr√≥b√°lja megk√ºl√∂nb√∂ztetni az igazit a hamist√≥l.

$$
\min_G \max_D V(D, G) = \mathbb{E}_{x \sim p_\text{data}}[\log D(x)] + \mathbb{E}_{z \sim p_z}[\log(1 - D(G(z)))]
$$
""")

    st.sidebar.header("üõ†Ô∏è Param√©terek")
    z_dim = st.sidebar.slider("Z dimenzi√≥", 32, 256, 64, step=16)
    lr = st.sidebar.select_slider("Tanul√°si r√°ta", options=[1e-5, 5e-5, 1e-4, 2e-4], value=2e-4)
    epochs = st.sidebar.slider("Epochok sz√°ma", 1, 10, 3)
    batch_size = st.sidebar.slider("Batch m√©ret", 32, 256, 64, step=32)
    seed = st.sidebar.number_input("Seed", 0, 9999, 42)
    show_outputs = st.sidebar.checkbox("üìä √Åbr√°k √©s mint√°k megjelen√≠t√©se", value=True)

    if st.button("üöÄ Tan√≠t√°s ind√≠t√°sa"):
        torch.manual_seed(seed)
        device = "cuda" if torch.cuda.is_available() else "cpu"
        loader = load_data(batch_size)
        generator = Generator(z_dim).to(device)
        discriminator = Discriminator().to(device)
        optim_g = optim.Adam(generator.parameters(), lr=lr)
        optim_d = optim.Adam(discriminator.parameters(), lr=lr)
        criterion = nn.BCELoss()
        g_losses, d_losses = [], []

        for epoch in range(epochs):
            for i, (real_imgs, _) in enumerate(loader):
                if i * batch_size > 1000:  # Limitek 1000 k√©pre!
                    break
                real_imgs = real_imgs.view(-1, 28*28).to(device)
                batch = real_imgs.size(0)
                real_labels = torch.ones(batch, 1).to(device)
                fake_labels = torch.zeros(batch, 1).to(device)

                z = torch.randn(batch, z_dim).to(device)
                fake_imgs = generator(z)
                d_real = discriminator(real_imgs)
                d_fake = discriminator(fake_imgs.detach())
                loss_d = (criterion(d_real, real_labels) + criterion(d_fake, fake_labels)) / 2
                optim_d.zero_grad()
                loss_d.backward()
                optim_d.step()

                z = torch.randn(batch, z_dim).to(device)
                fake_imgs = generator(z)
                d_fake = discriminator(fake_imgs)
                loss_g = criterion(d_fake, real_labels)
                optim_g.zero_grad()
                loss_g.backward()
                optim_g.step()

            g_losses.append(loss_g.item())
            d_losses.append(loss_d.item())
            st.write(f"üìä Epoch {epoch+1}/{epochs} | Generator: {loss_g.item():.4f} | Discriminator: {loss_d.item():.4f}")

        if show_outputs:
            st.subheader("üìâ Loss g√∂rbe")
            fig, ax = plt.subplots()
            ax.plot(g_losses, label="Gener√°tor")
            ax.plot(d_losses, label="Diszkrimin√°tor")
            ax.set_xlabel("Epoch")
            ax.set_ylabel("Loss")
            ax.legend()
            st.pyplot(fig)

            st.subheader("üñºÔ∏è Gener√°lt mint√°k")
            show_images(generator, z_dim, device)

            # Plotly 3D
            z = torch.randn(1000, z_dim).to(device)
            with torch.no_grad():
                fake = generator(z).cpu().view(-1, 28*28)
            df = pd.DataFrame(fake[:, :3].numpy(), columns=["x", "y", "z"])
            st.subheader("üåà 3D Latens t√©r")
            fig3d = px.scatter_3d(df, x="x", y="y", z="z", color=df["z"], opacity=0.7,
                                  title="Latens t√©r 3 dimenzi√≥ban (mint√°k els≈ë 3 komponense)")
            st.plotly_chart(fig3d, use_container_width=True)

        # CSV export
        z = torch.randn(1000, z_dim).to(device)
        samples = generator(z).view(-1, 28*28).cpu().detach().numpy()
        df = pd.DataFrame(samples)
        csv = df.to_csv(index=False).encode("utf-8")
        st.download_button("‚¨áÔ∏è Mint√°k ment√©se (CSV)", data=csv, file_name="gan_samples.csv")

        st.subheader("üìö Tudom√°nyos √©rtelmez√©s")
        st.markdown("""
A GAN-modellek iterat√≠v tan√≠t√°sa sor√°n a diszkrimin√°tor √©s a gener√°tor ‚Äûversengve‚Äù fejl≈ëdnek.  
A vesztes√©g√©rt√©kek √©s a vizu√°lis min≈ës√©g is mutatja, mennyire sikeres a hamis mint√°k l√©trehoz√°sa.

- A gener√°tor tanul√°si g√∂rb√©je cs√∂kken≈ë trendet mutat ‚Üí sikeres mintagener√°l√°s.
- A diszkrimin√°tor vesztes√©ge emelkedhet, ha neh√©zs√©get okoz a val√≥di √©s gener√°lt adatok megk√ºl√∂nb√∂ztet√©se.
- A 3D scatter plot a mint√°k s≈±r≈±s√©g√©t √©s szerkezet√©t szeml√©lteti a latens t√©r reprezent√°ci√≥j√°ban.

A gyors√≠tott v√°ltozat csak 1000 k√©ppel dolgozik, ami jelent≈ësen cs√∂kkenti a sz√°m√≠t√°si id≈ët,
mik√∂zben lehet≈ëv√© teszi a GAN viselked√©s√©nek vizsg√°lat√°t kisebb mint√°kon is.
        """)

# ReflectAI kompatibilit√°s
app = run

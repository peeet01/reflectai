import streamlit as st
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from modules.kuramoto_sim import run_kuramoto_simulation
from modules.hebbian_learning import run_hebbian_learning_with_noise
from modules.xor_prediction import run_xor_prediction
from modules.lorenz_sim import generate_lorenz_data
from modules.predict_lorenz import predict_lorenz

st.set_page_config(page_title="ReflectAI ‚Äì Fejlesztett Kutat√°si Protot√≠pus", page_icon="üß†")
st.title("üß† ReflectAI ‚Äì Tudom√°nyos szint≈± MI szimul√°ci√≥k")

user_input = st.text_input("K√©rd√©sed vagy kutat√°si parancsod:")
if user_input:
    st.subheader("üí° Szab√°lyalap√∫ v√°lasz")
    st.write("Ez a verzi√≥ a kutat√°si komponensekre f√≥kusz√°l. Szimul√°lt, tematikus v√°lasz √©rkezik.")
    st.markdown("### üîç √ñnreflexi√≥:")
    st.write("A rendszer b≈ëv√≠tett metrik√°k alapj√°n m≈±k√∂dik: tanul√°si zaj, szinkroniz√°ci√≥s id≈ë, predikci√≥s pontoss√°g.")

# Kuramoto
st.header("üåê Kuramoto szinkroniz√°ci√≥")
fig1, steps_needed = run_kuramoto_simulation()
st.pyplot(fig1)
st.success(f"Szinkroniz√°ci√≥s id≈ë: {steps_needed} iter√°ci√≥")

# Hebbian
st.header("üß¨ Hebbian tanul√°s zajmodellel")
learning_rate = st.slider("Tanul√°si r√°ta", 0.01, 1.0, 0.1, 0.01)
noise_level = st.slider("Zaj szintje", 0.0, 1.0, 0.1, 0.01)
iterations = st.slider("Iter√°ci√≥k sz√°ma", 10, 1000, 100, 10)
fig2 = run_hebbian_learning_with_noise(learning_rate, noise_level, iterations)
st.pyplot(fig2)

# XOR
st.header("üß† XOR predikci√≥s tanul√°si feladat")
accuracy = run_xor_prediction()
st.success(f"Predikci√≥s pontoss√°g: {accuracy:.2f} %")

# Lorenz attraktor predikci√≥ (Ridge)
st.header("üåÄ Lorenz-attraktor predikci√≥ (Ridge regresszi√≥)")
if st.button("Szimul√°ci√≥ √©s predikci√≥ futtat√°sa"):
    t, true_states = generate_lorenz_data()
    pred_states = predict_lorenz(true_states, window=5, alpha=1.0)

    fig = plt.figure(figsize=(10, 5))
    ax = fig.add_subplot(121, projection='3d')
    ax.plot(*true_states.T, label='Val√≥di')
    ax.set_title("Val√≥di Lorenz p√°lya")

    ax2 = fig.add_subplot(122, projection='3d')
    ax2.plot(*pred_states.T, label='Predik√°lt', color='orange')
    ax2.set_title("Predik√°lt Lorenz p√°lya (Ridge)")

    st.pyplot(fig)
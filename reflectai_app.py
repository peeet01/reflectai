import streamlit as st 
import yaml 
from yaml.loader 
import SafeLoader 
import streamlit_authenticator as stauth from utils.metadata_loader 
import load_metadata from modules.modules_registry 
import MODULES

--- Konfigur√°ci√≥ bet√∂lt√©se ---

with open("config.yaml") as file: config = yaml.load(file, Loader=SafeLoader)

--- Autentik√°ci√≥ ---

authenticator = stauth.Authenticate( credentials=config['credentials'], cookie_name=config['cookie']['name'], key=config['cookie']['key'], cookie_expiry_days=config['cookie']['expiry_days'], preauthorized=config.get('preauthorized', {}) )

--- Bejelentkez√©s ---

name, authentication_status, username = authenticator.login("Bejelentkez√©s", "main")

--- Hiteles√≠t√©s kezel√©se ---

if authentication_status is False: st.error("‚ùå Hib√°s felhaszn√°l√≥n√©v vagy jelsz√≥.") elif authentication_status is None: st.warning("‚ö†Ô∏è K√©rlek jelentkezz be.") elif authentication_status: st.set_page_config(page_title="ReflectAI App", layout="wide") st.sidebar.success(f"‚úÖ Bejelentkezve mint: {name} ({username})")

st.title(":brain: ReflectAI ‚Äì Scientific Research Modules")
st.markdown("V√°lassz egy modult a bal oldali men√ºben az ind√≠t√°shoz.")

# Modulv√°laszt√≥
st.sidebar.title(":file_folder: Modulok")
module_names = list(MODULES.keys())
selected_module = st.sidebar.radio("V√°lassz modult:", module_names)

# Modul bet√∂lt√©se
if selected_module:
    st.header(f"Modul: {selected_module}")

    # Metaadatok bet√∂lt√©se
    metadata_key = selected_module.replace(" ", "_").lower()
    metadata = load_metadata(metadata_key)

    with st.expander("üìÉ Modul metaadatai", expanded=False):
        st.json(metadata)

    # Modul futtat√°sa
    MODULES[selected_module]()


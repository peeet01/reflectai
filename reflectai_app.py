üìÅ reflectai_app.py ‚Äì f≈ëind√≠t√≥ f√°jl

import streamlit as st from datetime import datetime

Modulok import√°l√°sa

from modules.kuramoto_sim import run as run_kuramoto from modules.hebbian_learning import run as run_hebbian from modules.xor_prediction import run as run_xor from modules.kuramoto_hebbian_sim import run as run_kuramoto_hebbian from modules.topo_protect import run as run_topo_protect from modules.lorenz_sim import run as run_lorenz_sim from modules.mlp_predict_lorenz import run as run_lorenz_pred from modules.berry_curvature import run as run_berry from modules.noise_robustness import run as run_noise from modules.esn_prediction import run as run_esn from modules.plasticity_dynamics import run as run_plasticity from modules.fractal_dimension import run as run_fractal from modules.memory_landscape import run as run_memory_landscape from modules.graph_sync_analysis import run as run_graph_sync_analysis from modules.persistent_homology import run as run_homology from modules.help_module import run as run_help from modules.data_upload import run as run_data_upload from modules.lyapunov_spectrum import run as run_lyapunov_spectrum from modules.insight_learning import run as run_insight_learning from modules.generative_kuramoto import run as run_generative_kuramoto from modules.reflection_modul import run as run_reflection

Streamlit be√°ll√≠t√°sok

st.set_page_config(page_title="Neurolab AI ‚Äì Scientific Playground Sandbox", page_icon="üß†", layout="wide") st.title("Neurolab AI ‚Äì Scientific Playground Sandbox") st.markdown("V√°lassz egy modult a bal oldali s√°vb√≥l a vizualiz√°ci√≥ ind√≠t√°s√°hoz.") st.text_input("Megfigyel√©s vagy jegyzet (opcion√°lis):")

Modulv√°laszt√≥

st.sidebar.title("Modulv√°laszt√≥") module_name = st.sidebar.radio("K√©rlek v√°lassz:", ( "Kuramoto szinkroniz√°ci√≥", "Hebbian tanul√°s", "XOR predikci√≥", "Kuramoto‚ÄìHebbian h√°l√≥", "Topol√≥giai szinkroniz√°ci√≥", "Lorenz szimul√°ci√≥", "Lorenz predikci√≥", "Topol√≥giai v√©detts√©g (Chern-sz√°m)", "Topol√≥giai Chern‚Äìsz√°m anal√≠zis", "Zajt≈±r√©s √©s szinkroniz√°ci√≥s robusztuss√°g", "Echo State Network (ESN) predikci√≥", "Hebbian plaszticit√°s dinamik√°ja", "Szinkronfrakt√°l dimenzi√≥anal√≠zis", "Bel√°t√°s alap√∫ tanul√°s (Insight Learning)", "Generat√≠v Kuramoto h√°l√≥zat", "Mem√≥ria t√°jk√©p (Pro)", "Gr√°falap√∫ szinkronanal√≠zis", "Perzisztens homol√≥gia", "Lyapunov spektrum", "Adatfelt√∂lt√©s modul", "Napi √∂nreflexi√≥", "S√∫g√≥ / Help" ))

Modulok futtat√°sa felt√©tel szerint

if module_name == "Kuramoto szinkroniz√°ci√≥": coupling = st.slider("Kapcsol√°si er≈ëss√©g (K)", 0.0, 10.0, 2.0) num_osc = st.number_input("Oszcill√°torok sz√°ma", min_value=2, max_value=100, value=10) run_kuramoto(coupling, num_osc)

elif module_name == "Hebbian tanul√°s": learning_rate = st.slider("Tanul√°si r√°ta", 0.001, 1.0, 0.1) num_neurons = st.number_input("Neuronok sz√°ma", min_value=2, max_value=100, value=10) run_hebbian(learning_rate, num_neurons)

elif module_name == "XOR predikci√≥": hidden_size = st.slider("Rejtett r√©teg m√©rete", 1, 10, 2) learning_rate = st.slider("Tanul√°si r√°ta", 0.001, 1.0, 0.1) epochs = st.number_input("Epochok sz√°ma", 100, 10000, 1000, step=100) note = st.text_input("Megjegyz√©s (opcion√°lis)") run_xor(hidden_size, learning_rate, epochs, note)

elif module_name == "Kuramoto‚ÄìHebbian h√°l√≥": run_kuramoto_hebbian()

elif module_name == "Topol√≥giai szinkroniz√°ci√≥": run_topo_protect()

elif module_name == "Lorenz szimul√°ci√≥": run_lorenz_sim()

elif module_name == "Lorenz predikci√≥": run_lorenz_pred()

elif module_name == "Topol√≥giai v√©detts√©g (Chern-sz√°m)": run_berry()

elif module_name == "Topol√≥giai Chern‚Äìsz√°m anal√≠zis": run_berry()

elif module_name == "Zajt≈±r√©s √©s szinkroniz√°ci√≥s robusztuss√°g": run_noise()

elif module_name == "Echo State Network (ESN) predikci√≥": run_esn()

elif module_name == "Hebbian plaszticit√°s dinamik√°ja": run_plasticity()

elif module_name == "Szinkronfrakt√°l dimenzi√≥anal√≠zis": run_fractal()

elif module_name == "Bel√°t√°s alap√∫ tanul√°s (Insight Learning)": trials = st.slider("Pr√≥b√°lkoz√°sok sz√°ma", 1, 20, 5) pause_time = st.slider("Meg√°ll√°s id≈ëtartama (mp)", 0.0, 5.0, 1.0) complexity = st.selectbox("Feladat komplexit√°sa", ["alacsony", "k√∂zepes", "magas"]) run_insight_learning(trials, pause_time, complexity)

elif module_name == "Generat√≠v Kuramoto h√°l√≥zat": run_generative_kuramoto()

elif module_name == "Mem√≥ria t√°jk√©p (Pro)": run_memory_landscape()

elif module_name == "Gr√°falap√∫ szinkronanal√≠zis": run_graph_sync_analysis()

elif module_name == "Perzisztens homol√≥gia": run_homology()

elif module_name == "Lyapunov spektrum": run_lyapunov_spectrum()

elif module_name == "Adatfelt√∂lt√©s modul": run_data_upload()

elif module_name == "Napi √∂nreflexi√≥": run_reflection()

elif module_name == "S√∫g√≥ / Help": run_help()


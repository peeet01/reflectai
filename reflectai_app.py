import streamlit as st

CSS bet√∂lt√©se

with open("style.css") as f: st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

Modulok import√°l√°sa

from modules.kuramoto_sim import run as run_kuramoto from modules.hebbian_learning import run as run_hebbian from modules.xor_prediction import run as run_xor from modules.kuramoto_hebbian_sim import run as run_kuramoto_hebbian from modules.topo_protect import run as run_topo_protect from modules.lorenz_sim import run as run_lorenz_sim from modules.predict_lorenz import run as run_lorenz_pred from modules.berry_curvature import run as run_berry from modules.noise_robustness import run as run_noise from modules.esn_prediction import run as run_esn from modules.plasticity_dynamics import run as run_plasticity from modules.fractal_dimension import run as run_fractal from modules.insight_learning import run as run_insight_learning from modules.generative_kuramoto import run as run_generative_kuramoto from modules.memory_landscape import run as run_memory_landscape from modules.graph_sync_analysis import run as run_graph_sync_analysis

Alkalmaz√°s c√≠me √©s bevezet≈ë

st.set_page_config(page_title="NeuroLab AI ‚Äì Scientific Playground Sandbox", layout="wide", page_icon="üß†") st.title("\ud83e\udde0 NeuroLab AI ‚Äì Scientific Playground Sandbox") st.markdown("Fedezd fel a mesters√©ges intelligencia, szinkroniz√°ci√≥ √©s adapt√≠v rendszerek vil√°g√°t interakt√≠v szimul√°ci√≥kkal, modellez√©ssel √©s vizualiz√°ci√≥val ‚Äì minden egy helyen.")

√úres sz√∂vegmez≈ë a megfigyel√©sekhez

st.text_input("\ud83d\udcdd Megfigyel√©s vagy jegyzet (opcion√°lis):")

Modulv√°laszt√≥

st.sidebar.title("\ud83e\uddea Sandbox Modulv√°laszt√≥") module_name = st.sidebar.radio("K√©rlek v√°lassz:", ( "Kuramoto szinkroniz√°ci√≥", "Hebbian tanul√°s", "XOR predikci√≥", "Kuramoto‚ÄìHebbian h√°l√≥", "Topol√≥giai szinkroniz√°ci√≥", "Lorenz szimul√°ci√≥", "Lorenz predikci√≥", "Topol√≥giai v√©detts√©g (Chern-sz√°m)", "Topol√≥giai Chern‚Äìsz√°m anal√≠zis", "Zajt≈±r√©s √©s szinkroniz√°ci√≥s robusztuss√°g", "Echo State Network (ESN) predikci√≥", "Hebbian plaszticit√°s dinamik√°ja", "Szinkronfrakt√°l dimenzi√≥anal√≠zis", "Bel√°t√°s alap√∫ tanul√°s (Insight Learning)", "Generat√≠v Kuramoto h√°l√≥zat", "Mem√≥ria t√°jk√©p (Pro)", "Gr√°f szinkroniz√°ci√≥s anal√≠zis" ))

Modulok futtat√°sa

if module_name == "Kuramoto szinkroniz√°ci√≥": st.subheader("\ud83e\udd1d Kuramoto param√©terek") coupling = st.slider("Kapcsol√°si er≈ëss√©g (K)", 0.0, 10.0, 2.0) num_osc = st.number_input("Oszcill√°torok sz√°ma", min_value=2, max_value=100, value=10) run_kuramoto(coupling, num_osc)

elif module_name == "Hebbian tanul√°s": st.subheader("\ud83e\udde0 Hebbian param√©terek") learning_rate = st.slider("Tanul√°si r√°ta", 0.001, 1.0, 0.1) num_neurons = st.number_input("Neuronok sz√°ma", min_value=2, max_value=100, value=10) run_hebbian(learning_rate, num_neurons)

elif module_name == "XOR predikci√≥": st.subheader("\ud83e\udde0 XOR tan√≠t√°sa neur√°lis h√°l√≥val") hidden_size = st.slider("Rejtett r√©teg neuronjainak sz√°ma", 1, 10, 2) learning_rate = st.slider("Tanul√°si r√°ta", 0.001, 1.0, 0.1) epochs = st.number_input("Epochok sz√°ma", min_value=100, max_value=10000, value=1000, step=100) note = st.text_input("Megjegyz√©s (opcion√°lis)") run_xor(hidden_size, learning_rate, epochs, note)

elif module_name == "Kuramoto‚ÄìHebbian h√°l√≥": run_kuramoto_hebbian()

elif module_name == "Topol√≥giai szinkroniz√°ci√≥": run_topo_protect()

elif module_name == "Lorenz szimul√°ci√≥": run_lorenz_sim()

elif module_name == "Lorenz predikci√≥": run_lorenz_pred()

elif module_name == "Topol√≥giai v√©detts√©g (Chern-sz√°m)": run_berry()

elif module_name == "Topol√≥giai Chern‚Äìsz√°m anal√≠zis": run_berry()

elif module_name == "Zajt≈±r√©s √©s szinkroniz√°ci√≥s robusztuss√°g": run_noise()

elif module_name == "Echo State Network (ESN) predikci√≥": run_esn()

elif module_name == "Hebbian plaszticit√°s dinamik√°ja": run_plasticity()



import streamlit as st
import requests

# Modulok import√°l√°sa
from modules.kuramoto_sim import run as run_kuramoto
from modules.hebbian_learning import run as run_hebbian
from modules.xor_prediction import run as run_xor
from modules.kuramoto_hebbian_sim import run as run_kuramoto_hebbian
from modules.topo_protect import run as run_topo_protect
from modules.lorenz_sim import run as run_lorenz_sim
from modules.predict_lorenz import run as run_lorenz_pred
from modules.berry_curvature import run as run_berry
from modules.noise_robustness import run as run_noise
from modules.esn_prediction import run as run_esn
from modules.plasticity_dynamics import run as run_plasticity
from modules.fractal_dimension import run as run_fractal
from modules.insight_learning import run as run_insight_learning

# API KEY megad√°sa (ide illeszd be saj√°t kulcsod)
API_KEY = "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"

# Alkalmaz√°s c√≠me √©s bevezet≈ë
st.set_page_config(page_title="ReflecAI - Szinkroniz√°ci√≥ √©s MI", layout="wide")
st.title("üåê ReflecAI - Szinkroniz√°ci√≥ √©s Mesters√©ges Intelligencia")
st.markdown("V√°lassz egy modult a bal oldali s√°vb√≥l a vizualiz√°ci√≥ ind√≠t√°s√°hoz.")

# Nyelvi k√©rd√©s sz√∂vegdoboz
user_input = st.text_input("üí¨ √çrd be k√©rd√©sed vagy megfigyel√©sed (nyelvi modulhoz):")

# Nyelvi modell h√≠v√°sa
if user_input:
    st.markdown("üß† Nyelvi modell gondolkodik...")
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json",
        "Referer": "https://reflec.streamlit.app",
        "X-Title": "ReflecAI"
    }
    data = {
        "model": "openrouter/mistral-7b-instruct",
        "messages": [{"role": "user", "content": user_input}]
    }
    try:
        response = requests.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=data)
        result = response.json()
        if "choices" in result:
            reply = result["choices"][0]["message"]["content"]
            st.success("üí¨ V√°lasz a nyelvi modellt≈ël:")
            st.markdown(reply)
        else:
            st.error("‚ùå A v√°lasz nem tartalmazott 'choices' mez≈ët. Lehet, hogy hib√°s volt a k√©r√©s vagy a modelln√©v.")
            st.json(result)
    except Exception as e:
        st.error(f"Hiba t√∂rt√©nt: {e}")

# Modulv√°laszt√≥
st.sidebar.title("üìÇ Modulv√°laszt√≥")
module_name = st.sidebar.radio("K√©rlek v√°lassz:", (
    "Kuramoto szinkroniz√°ci√≥",
    "Hebbian tanul√°s",
    "XOR predikci√≥",
    "Kuramoto‚ÄìHebbian h√°l√≥",
    "Topol√≥giai szinkroniz√°ci√≥",
    "Lorenz szimul√°ci√≥",
    "Lorenz predikci√≥",
    "Topol√≥giai v√©detts√©g (Chern-sz√°m)",
    "Topol√≥giai Chern‚Äìsz√°m anal√≠zis",
    "Zajt≈±r√©s √©s szinkroniz√°ci√≥s robusztuss√°g",
    "Echo State Network (ESN) predikci√≥",
    "Hebbian plaszticit√°s dinamik√°ja",
    "Szinkronfrakt√°l dimenzi√≥anal√≠zis",
    "Bel√°t√°s alap√∫ tanul√°s (Insight Learning)"
))

if module_name == "Kuramoto szinkroniz√°ci√≥":
    st.subheader("üß≠ Kuramoto param√©terek")
    coupling = st.slider("Kapcsol√°si er≈ëss√©g (K)", 0.0, 10.0, 2.0)
    num_osc = st.number_input("Oszcill√°torok sz√°ma", min_value=2, max_value=100, value=10)
    run_kuramoto(coupling, num_osc)
elif module_name == "Hebbian tanul√°s":
    st.subheader("üß† Hebbian param√©terek")
    learning_rate = st.slider("Tanul√°si r√°ta", 0.001, 1.0, 0.1)
    num_neurons = st.number_input("Neuronok sz√°ma", min_value=2, max_value=100, value=10)
    run_hebbian(learning_rate, num_neurons)
elif module_name == "XOR predikci√≥":
    st.subheader("üß† XOR tan√≠t√°sa neur√°lis h√°l√≥val")
    hidden_size = st.slider("Rejtett r√©teg neuronjainak sz√°ma", 1, 10, 2)
    learning_rate = st.slider("Tanul√°si r√°ta", 0.001, 1.0, 0.1)
    epochs = st.number_input("Epochok sz√°ma", min_value=100, max_value=10000, value=1000, step=100)
    note = st.text_input("Megjegyz√©s (opcion√°lis)")
    run_xor(hidden_size, learning_rate, epochs, note)
elif module_name == "Kuramoto‚ÄìHebbian h√°l√≥":
    run_kuramoto_hebbian()
elif module_name == "Topol√≥giai szinkroniz√°ci√≥":
    run_topo_protect()
elif module_name == "Lorenz szimul√°ci√≥":
    run_lorenz_sim()
elif module_name == "Lorenz predikci√≥":
    run_lorenz_pred()
elif module_name == "Topol√≥giai v√©detts√©g (Chern-sz√°m)":
    run_berry()
elif module_name == "Topol√≥giai Chern‚Äìsz√°m anal√≠zis":
    run_berry()
elif module_name == "Zajt≈±r√©s √©s szinkroniz√°ci√≥s robusztuss√°g":
    run_noise()
elif module_name == "Echo State Network (ESN) predikci√≥":
    run_esn()
elif module_name == "Hebbian plaszticit√°s dinamik√°ja":
    run_plasticity()
elif module_name == "Szinkronfrakt√°l dimenzi√≥anal√≠zis":
    run_fractal()
elif module_name == "Bel√°t√°s alap√∫ tanul√°s (Insight Learning)":
    st.subheader("üí° Bel√°t√°s alap√∫ tanul√°si szimul√°ci√≥")
    trials = st.slider("Pr√≥b√°lkoz√°sok sz√°ma", 1, 20, 5)
    pause_time = st.slider("Meg√°ll√°s hossza (m√°sodperc)", 0.0, 5.0, 1.0)
    complexity = st.selectbox("Feladat komplexit√°sa", ["alacsony", "k√∂zepes", "magas"])
    run_insight_learning(trials, pause_time, complexity)

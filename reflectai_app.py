import streamlit as st

# Modulok import√°l√°sa
from modules.kuramoto_sim import run as run_kuramoto
from modules.hebbian_learning import run as run_hebbian
from modules.xor_prediction import run as run_xor
from modules.kuramoto_hebbian_sim import run as run_kuramoto_hebbian
from modules.topo_protect import run as run_topo_protect
from modules.lorenz_sim import run as run_lorenz_sim
from modules.predict_lorenz import run as run_lorenz_pred
from modules.berry_curvature import run as run_berry
from modules.noise_robustness import run as run_noise
from modules.esn_prediction import run as run_esn
from modules.plasticity_dynamics import run as run_plasticity
from modules.fractal_dimension import run as run_fractal

# Oldal be√°ll√≠t√°sa
st.set_page_config(page_title="ReflecAI - Szinkroniz√°ci√≥ √©s MI", layout="wide")
st.title("üåê ReflecAI - Szinkroniz√°ci√≥ √©s Mesters√©ges Intelligencia")
st.markdown("V√°lassz egy modult a bal oldali s√°vb√≥l a vizualiz√°ci√≥ ind√≠t√°s√°hoz.")

# Modulv√°laszt√≥
st.sidebar.title("üìÇ Modulv√°laszt√≥")
module_name = st.sidebar.radio("K√©rlek v√°lassz:", (
    "Kuramoto szinkroniz√°ci√≥",
    "Hebbian tanul√°s",
    "XOR predikci√≥",
    "Kuramoto‚ÄìHebbian h√°l√≥",
    "Topol√≥giai szinkroniz√°ci√≥",
    "Lorenz szimul√°ci√≥",
    "Lorenz predikci√≥",
    "Topol√≥giai v√©detts√©g (Chern-sz√°m)",
    "Topol√≥giai Chern‚Äìsz√°m anal√≠zis",
    "Zajt≈±r√©s √©s szinkroniz√°ci√≥s robusztuss√°g",
    "Echo State Network (ESN) predikci√≥",
    "Hebbian plaszticit√°s dinamik√°ja",
    "Szinkronfrakt√°l dimenzi√≥anal√≠zis"
))

# Modul futtat√°s logika
if module_name == "Kuramoto szinkroniz√°ci√≥":
    st.subheader("üåÄ Kuramoto szinkroniz√°ci√≥ - Param√©terek")
    num_oscillators = st.slider("Oszcill√°torok sz√°ma", 2, 100, 10)
    coupling_strength = st.slider("Kapcsol√≥d√°si er≈ëss√©g", 0.0, 5.0, 1.0)
    time_steps = st.number_input("Szimul√°ci√≥ id≈ël√©p√©sei", min_value=10, max_value=10000, value=200)
    user_comment = st.text_input("Megjegyz√©s (opcion√°lis)")
    run_kuramoto(num_oscillators, coupling_strength, time_steps, user_comment)

elif module_name == "Hebbian tanul√°s":
    st.subheader("üß† Hebbian tanul√°s - Param√©terek")
    num_neurons = st.slider("Neuronok sz√°ma", 2, 100, 10)
    learning_rate = st.slider("Tanul√°si r√°ta", 0.001, 1.0, 0.1)
    iterations = st.number_input("Iter√°ci√≥k sz√°ma", min_value=10, max_value=5000, value=100)
    user_note = st.text_input("Megjegyz√©s (opcion√°lis)")
    run_hebbian(num_neurons, learning_rate, iterations, user_note)

elif module_name == "XOR predikci√≥":
    run_xor()

elif module_name == "Kuramoto‚ÄìHebbian h√°l√≥":
    run_kuramoto_hebbian()

elif module_name == "Topol√≥giai szinkroniz√°ci√≥":
    run_topo_protect()

elif module_name == "Lorenz szimul√°ci√≥":
    run_lorenz_sim()

elif module_name == "Lorenz predikci√≥":
    run_lorenz_pred()

elif module_name == "Topol√≥giai v√©detts√©g (Chern-sz√°m)":
    run_berry()

elif module_name == "Topol√≥giai Chern‚Äìsz√°m anal√≠zis":
    run_berry()

elif module_name == "Zajt≈±r√©s √©s szinkroniz√°ci√≥s robusztuss√°g":
    run_noise()

elif module_name == "Echo State Network (ESN) predikci√≥":
    run_esn()

elif module_name == "Hebbian plaszticit√°s dinamik√°ja":
    run_plasticity()

elif module_name == "Szinkronfrakt√°l dimenzi√≥anal√≠zis":
    run_fractal()
